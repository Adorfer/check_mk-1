#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


pethPsePortDetectionStatus_map = { 
                '1': 'disabled',
                '2': 'searching', 
                '3': 'deliveringPower', 
                '4': 'fault', 
                '5': 'test',
                '6': 'otherFault' }

pethMainPseOperStatus_map  = {
                '1': 'on',
                '2': 'off',
                '3': 'faulty' }

def inventory_power_ethernet(info):
    return [ (None, None) ]

def check_power_ethernet(item, params, info):

    pethPsePortEntry = info[0]
    pethMainPseEntry = info[1][0]

    interface_status = {}
    for interface in pethPsePortEntry:
        interface = str(interface[0])

        if pethPsePortDetectionStatus_map[interface] not in interface_status.keys():
                interface_status[pethPsePortDetectionStatus_map[interface]] = 1
        else:
                interface_status[pethPsePortDetectionStatus_map[interface]] += 1

    for status in interface_status.keys():
        interface_status[status] = str(interface_status[status]) + "x"

    pethMainPsePower            = pethMainPseEntry[0]
    pethMainPseOperStatus       = pethMainPseEntry[1]
    pethMainPseConsumptionPower = pethMainPseEntry[2]
    pethMainPseUsageThreshold   = int(pethMainPseEntry[3])

    warn_power = False
    if pethMainPseUsageThreshold != 0:
    	if (int(pethMainPsePower) * ( int(pethMainPseUsageThreshold) / 100.0 )) <= pethMainPseUsageThreshold:
        	warn_power = True

    msg  = "Operational Status: %s, Maximum Power: %sW, " % (pethMainPseOperStatus_map[pethMainPseOperStatus], pethMainPsePower)
    msg += "Power in Use: %sW , Details: %s" % (pethMainPseConsumptionPower, str(interface_status))

    if "fault" in interface_status.keys() or "otherFault" in interface_status.keys() or pethMainPseOperStatus_map[pethMainPseOperStatus] == "faulty" or warn_power:
        return (2, "PoE faulty (!) -- " + msg)
    elif len(interface_status) != 0:
        return (0, msg)
    else:
        return (3, "item not found in snmp data")



check_info["power_ethernet"] = {
    'check_function':          check_power_ethernet,
    'inventory_function':      inventory_power_ethernet,
    'service_description':     'PoE Status',
    'snmp_info':                [ ('.1.3.6.1.2.1.105.1.1.1', ['6']), # pethPsePortDetectionStatus
                                  ('.1.3.6.1.2.1.105.1.3.1.1', ['2',     # pethMainPsePower
                                                          '3',     # pethMainPseOperStatus
                                                          '4',     # pethMainPseConsumptionPower
                                                          '5'])     # pethMainPseUsageThreshold
                                ],
    'snmp_scan_function':      lambda oid: oid(".1.3.6.1.2.1.105.1.1.1.*") != None,
}
