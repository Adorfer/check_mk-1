#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Christian Burmeister

class STP_SNMP(object):
        # http://www.cisco.com/c/en/us/support/docs/ip/simple-network-management-protocol-snmp/44800-mactoport44800.html

        def __init__(self, ip_address, snmp_credentials):
            self.__ip_address      = ip_address
            self.__snmp_credentials  = snmp_credentials
	    self.__all_vlans       = []

        def __get_oid(self, oid, index = ""):

	    if index != "":
		context_v2 = "@" + index
		context_v3 = "vlan-" + index
	    else:
		context_v2 = ""
		context_v3 = ""


	    version = 1
	    timeout = timeout = int(1 * 1000000) # default: 1 second
	    retries = 3	
 	    if type(self.__snmp_credentials) in (str, unicode):
		version = 2
    	    else:
        	version = 3
        	if len(self.__snmp_credentials) == 6:
            		sec_level, auth_proto, sec_name, auth_pass, priv_proto, priv_pass = self.__snmp_credentials
        	elif len(self.__snmp_credentials) == 4:
            		sec_level, auth_proto, sec_name, auth_pass = self.__snmp_credentials
            		priv_proto = 'DEFAULT'
            		priv_pass  = ''
        	else:
            		raise MKGeneralException("Invalid SNMP credentials '%r' for ip %s: "
                              "must be string, 4-tuple or 6-tuple" % (self.__snmp_credentials, self.__ip_address))

		


    	    if version != 3:
		print self.__ip_address, self.__snmp_credentials + context_v2, oid
        	session = netsnmp.Session(Version = version, DestHost = self.__ip_address,
            		Timeout    = timeout,
            		Retries    = retries,
            		Community  = self.__snmp_credentials + context_v2,
        	)
      	    else:
        	session = netsnmp.Session(Version = version, DestHost = self.__ip_address,
            		Timeout   = timeout,
            		Retries   = retries,
            		SecLevel  = sec_level,
            		AuthProto = auth_proto.upper(),
            		AuthPass  = auth_pass,
            		SecName   = sec_name,
            		PrivProto = priv_proto.upper(),
            		PrivPass  = priv_pass,
            		Context   = context_v3,
        	)


            session.UseLongNames = 1
            session.UseNumeric = 1
            session.Retries=2

	    oid_varlist = netsnmp.VarList(netsnmp.Varbind(oid))

            res = session.walk(oid_varlist)

            result_dict = {}
            i = 0
            for var in oid_varlist:
                if var.tag != None:
                        oid_suffix = var.tag.replace(oid,"") + "." + var.iid

                        if oid_suffix[:1] == ".":
                                oid_suffix = oid_suffix[1:]
                        result_dict[oid_suffix] = res[i]
                        i += 1

            return result_dict

        def __get_vlans(self):
            oid_vtpVlanState = '.1.3.6.1.4.1.9.9.46.1.3.1.1.2'
            vtpVlanState_dict = self.__get_oid(oid_vtpVlanState)


            for oid in vtpVlanState_dict:
                vlan = oid.replace("1.", "")
                self.__all_vlans.append(vlan)


	def get_stp_vlan(self, vlan):
	
		dot1dStp_base = ".1.3.6.1.2.1.17.2."

        	dot1dStp_dict = {
                        1 : "dot1dStpProtocolSpecification",
                        2 : "dot1dStpPriority",
                        3 : "dot1dStpTimeSinceTopologyChange",
                        4 : "dot1dStpTopChanges",
                        5 : "dot1dStpDesignatedRoot",
                        6 : "dot1dStpRootCost",
                        7 : "dot1dStpRootPort",
        	}

		for key, value in dot1dStp_dict.items():
			print key, value

			if vlan == None:
				print self.__get_oid(dot1dStp_base + str(key))
	

	def get_all_stp_vlans(self):
		self.__get_vlans()
		
		self.get_stp_vlan(None)

		




def parse_cisco_stp(info):


	#ip_address = lookup_ip_address(g_hostname)
        #snmp_credentials = snmp_credentials_of(g_hostname)

	#all_stp_vlans = STP_SNMP(ip_address, snmp_credentials).get_all_stp_vlans()
	
	(if_info, dot1dStp_1_info, dot1dStp_2_info) = info

 	dot1dStp_dict = {
			1 : "dot1dStpProtocolSpecification",
			2 : "dot1dStpPriority",
			3 : "dot1dStpTimeSinceTopologyChange",
			4 : "dot1dStpTopChanges",
			5 : "dot1dStpDesignatedRoot",
			6 : "dot1dStpRootCost",
                        7 : "dot1dStpRootPort",
                        8 : "dot1dStpMaxAge",
                        9 : "dot1dStpHelloTime",
	}

	stp_dict = {}
	
	for i in range(len(dot1dStp_2_info[0])):
		key = dot1dStp_dict[i+1] 
		value = dot1dStp_2_info[0][i]

		if key == "dot1dStpDesignatedRoot":
			bridgeID = "".join ([ "%02X" % ord( x ) for x in list(value)])
			bridePrioirty_hex = bridgeID[:4]
			bridePrioirty 	  = int("0x" + bridePrioirty_hex.lower(), 0)
			bridgeAddress_hex      = bridgeID[4:].upper()
			bridgeAddress          = "%s%s:%s%s:%s%s:%s%s:%s%s:%s%s" % (tuple(list(bridgeAddress_hex)))
			
			stp_dict.update( { "dot1dStpDesignatedRoot_Priority" : bridePrioirty } )
                        stp_dict.update( { "dot1dStpDesignatedRoot_Address" : bridgeAddress } )

		if key == "dot1dStpTimeSinceTopologyChange":
			timeticks = saveint(value)
	
			timeticks_string = ""
                	d, m = divmod(timeticks, 8640000)
                	timeticks_string += '%dD/' % d
                	d, m = divmod(m, 360000)
                	timeticks_string += '%dH/' % d
               	 	d, m = divmod(m, 6000)
                	timeticks_string += '%dM/' % d
                	d, m = divmod(m, 100)
                	timeticks_string += '%dS' % d

			stp_dict.update( { "dot1dStpTimeSinceTopologyChange_string" : timeticks_string } )	

		
		stp_dict.update( { key : value } )
	

	bridgeID_hex = "".join ([ "%02X" % ord( x ) for x in list(dot1dStp_1_info[0][0])])
	bridgeID = "%s%s:%s%s:%s%s:%s%s:%s%s:%s%s" % (tuple(list(bridgeID_hex)))


	if  str(stp_dict["dot1dStpProtocolSpecification"]) == "3":
		return (if_info, { "ieee8021d" : stp_dict} , bridgeID) 
	elif str(stp_dict["dot1dStpProtocolSpecification"]) == "2":
		return (if_info, { "decLb100" : stp_dict} , bridgeID)
	elif str(stp_dict["dot1dStpProtocolSpecification"]) == "1":
		#Neuer STP Versionen
		return (if_info, { "unknown" : stp_dict} , bridgeID)
	else:
		return None




def inventory_cisco_stp(parsed):

	(if_info, all_vlans_stp_dict, bridgeID) = parsed

	inventory = []
	inventory.append( ("general", None) )


	for vlan in all_vlans_stp_dict:
		inventory.append( (vlan, None) )
			

	return inventory


def check_cisco_stp(item, params, parsed):

	(if_info, all_vlans_stp_dict, bridgeID) = parsed

	if item == "general":
		msg = "BridgeID: " + bridgeID

		return 0, msg

	elif item in all_vlans_stp_dict:
		msg = ""
		msg += "BridgeID: " + all_vlans_stp_dict[item]["dot1dStpPriority"] 
		msg += " - "
                msg += "RootBridgeID: (" + str(all_vlans_stp_dict[item]["dot1dStpDesignatedRoot_Priority"]) + "-" + all_vlans_stp_dict[item]["dot1dStpDesignatedRoot_Address"] + ")"
                msg += " - " 
		msg += "RootPort: " + all_vlans_stp_dict[item]["dot1dStpRootCost"]
		msg += " - "
                msg += "RootPathCost: " + all_vlans_stp_dict[item]["dot1dStpRootCost"]
                msg += " - "
                msg += "TopChange: " + all_vlans_stp_dict[item]["dot1dStpTopChanges"]
                msg += " - "
		msg += "TopLastChange: " + all_vlans_stp_dict[item]["dot1dStpTimeSinceTopologyChange_string"]

		return 0, msg
	
	else:	
		return 3, "STP Vlan not found"


check_info["cisco_stp"] = {
    'check_function'            : check_cisco_stp,
    'inventory_function'        : inventory_cisco_stp,
    'parse_function'            : parse_cisco_stp,
    'service_description'       : "STP %s",
#    'has_perfdata'              : True,
    'snmp_info'                 : [(".1.3.6.1.2.1", if64_snmp_end_oids),
				   (".1.3.6.1.2.1.17.1", [ "1"]),
				   (".1.3.6.1.2.1.17.2", [ "1","2","3","4","5", "6", "7", "8", "9"]),
                                  ],
    'snmp_scan_function'        : lambda oid: if64_scan_function(oid, False),
#    'group'                     : 'if',
#    'default_levels_variable'   : 'if_default_levels',
}
