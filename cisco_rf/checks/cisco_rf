#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


cRFStatusUnitState_dict = {
	"0":"NOT_FOUND",
	"1":"notKnown",
	"2":"disabled",
	"3":"initialization",
	"4":"negotiation",
	"5":"standbyCold",
	"6":"standbyColdConfig",
	"7":"standbyColdFileSys",
	"8":"standbyColdBulk",
	"9":"standbyHot",
	"10":"activeFast",
	"11":"activeDrain",
	"12":"activePreconfig",
	"13":"activePostconfig",
	"14":"active",
	"15":"activeExtraload",
	"16":"activeHandback"
}

cRFStatusPeerUnitState_dict = cRFStatusUnitState_dict

cRFStatusLastSwactReasonCode_dict = {
	"1":"unsupported",
	"2":"none",
	"3":"notKnown",
	"4":"userInitiated",
	"5":"userForced",
	"6":"activeUnitFailed",
	"7":"activeUnitRemoved"
}

cRFCfgAdminAction_dict = {
	"0":"noAction",
	"1":"reloadPeer",
	"2":"reloadShelf",
	"3":"switchActivity",
	"4":"forceSwitchActivity",
}

cRFStatusDuplexMode_dict = {
        "2":"False  (SUB-Peer not detected)",
        "1":"True (SUB-Peer detected)",
}

def inventory_cisco_rf(info):
	return [ (None, info[0][0:6]) ]

def check_cisco_rf(item, params, info):
	if params == info[0][0:6]:
		return_status = 0
		msg = "UnitId: %s, UnitState: %s, PeerUnitId: %s, PeerUnitState: %s, LastSwactReasonCode: %s, DuplexMode: %s" % ( \
											info[0][1], cRFStatusUnitState_dict[info[0][2]], \
											info[0][3], cRFStatusPeerUnitState_dict[info[0][4]], \
											cRFStatusLastSwactReasonCode_dict[info[0][7]],
											cRFStatusDuplexMode_dict[info[0][5]])
	else:
		warn_state = ["active", "standbyHot", "disabled"]
		if cRFStatusUnitState_dict[info[0][2]] in warn_state and cRFStatusPeerUnitState_dict[info[0][4]] in warn_state:
			return_status = 1
		else:
			return_status = 2

		msg_new = "UnitId: %s, UnitState: %s, PeerUnitId: %s, PeerUnitState: %s, LastSwactReasonCode: %s, DuplexMode: %s" % ( \
                                                                                        info[0][1], cRFStatusUnitState_dict[info[0][2]], \
                                                                                        info[0][3], cRFStatusPeerUnitState_dict[info[0][4]], \
                                                                                        cRFStatusLastSwactReasonCode_dict[info[0][7]],
                                                                                        cRFStatusDuplexMode_dict[info[0][5]])
                msg_old = "UnitId: %s, UnitState: %s, PeerUnitId: %s, PeerUnitState: %s, DuplexMode: %s" % ( \
                                                                                        params[1], cRFStatusUnitState_dict[params[2]], \
                                                                                        params[3], cRFStatusPeerUnitState_dict[params[4]], \
                                                                                        cRFStatusDuplexMode_dict[params[5]])

		msg = "Supervisor Switchover (!) ------ OLD-Status: [%s], NEW-Status: [%s]" % (msg_new, msg_old)


	return (return_status, msg)

check_info["cisco_rf"] = {
    'check_function'      : check_cisco_rf,
    'inventory_function'  : inventory_cisco_rf,
    'service_description' : 'Supervisor status',
    'snmp_info'           : ('.1.3.6.1.4.1.9.9.176.1', [
                                    OID_END,
                                    1.1, # cRFStatusUnitId
                                    1.2, # cRFStatusUnitState
                                    1.3, # cRFStatusPeerUnitId
				    1.4, # cRFStatusPeerUnitState
                                    1.6, # cRFStatusDuplexMode
                                    1.7, # cRFStatusManualSwactInhibit
                                    1.8, # cRFStatusLastSwactReasonCode
                                    2.11, # cRFCfgAdminAction
                            ]),
    'snmp_scan_function'  : lambda oid: "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower(),
    'includes'            : ['cisco_sensor_item.include'],
}


