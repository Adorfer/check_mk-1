#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

vlanTrunkPortDynamicState_dict = {
        "1" : "on",
        "2" : "off",
        "3" : "desirable",
        "4" : "auto",
        "5" : "onNoNegotiate"
}

def parse_cisco_dtp(info):

        if info == []:
                return []

        parsed = {}
        for interface, status in info:
                if vlanTrunkPortDynamicState_dict[status] not in parsed:
                        parsed[vlanTrunkPortDynamicState_dict[status]] = []

                parsed[vlanTrunkPortDynamicState_dict[status]].append(interface)


        return parsed

def inventory_cisco_dtp(parsed):

        if "desirable" in parsed: 
                return [ (None, None) ]
        else:
                return []

def check_cisco_dtp(item, params, parsed):

        return_status = 0
        msg = []
        for item in parsed:
                item_msg = item + ": " + str(len(parsed[item])) + "x"
                if item == "desirable":
                        msg.append( "(!)" + item_msg + "(!)" )
                        return_status = 1
                else:
                         msg.append( item_msg )

        return return_status, "DTP Port Status: " + ", ".join(msg)


check_info["cisco_dtp"] = {
    'check_function':          check_cisco_dtp,
    'inventory_function':      inventory_cisco_dtp,
    'parse_function':          parse_cisco_dtp,
    'service_description':     'Cisco DTP',
    'snmp_info':               (".1.3.6.1.4.1.9.9.46.1.6.1.1", [OID_END,"13"]),
#    'snmp_scan_function':      lambda oid: oid(".1.3.6.1.4.1.9.9.46.1.2.1.1.3") != None,
} 
