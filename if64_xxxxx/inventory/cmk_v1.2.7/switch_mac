#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Christian Burmeister

ifOperStatus = {
                "1":"up",
                "2":"down",
                "3":"testing",
                "4":"unknown",
                "5":"dormant",
                "6":"notPresent",
                "7":"lowerLayerDown"}


def get_if_desc(port_info):
        ifDesc_dict = {}

        for interface in port_info:
                if_index = str(interface[0])
                if_desc  = interface[1]
                ifDesc_dict[if_index] = if_desc

        return ifDesc_dict


def inv_switch_mac(info, params):
	port_info, sysName, vlanTrunkPortDynamicStatus, dot1qVlanCurrentEntry, vmMembershipTable, dot3adAggPortSelectedAggID = info

	ip_address = lookup_ip_address(g_hostname)
	snmp_community = snmp_credentials_of(g_hostname)

	all_macs = MAC_SNMP(ip_address, snmp_community, mac_decode_dict,  mac_custom_decode_dict).get_all_macs()
	count_macs = {}

	vmMembershipTable_dict = get_vmMembershipTable(vmMembershipTable)
	(index_trunk_cisco, index_nottrunk_cisco) = get_index_trunk_cisco(vlanTrunkPortDynamicStatus, vmMembershipTable_dict, True)
    	(index_trunk_hp, index_nottrunk_hp)       = get_index_trunk_hp(dot1qVlanCurrentEntry, True)
	index_portchannel_cisco = get_index_portchannel_cisco(dot3adAggPortSelectedAggID)

	ifDesc_dict = get_if_desc(port_info)

	node_mac = inv_tree("networking.switch_mac:")

	
	for if_index in sorted(all_macs.keys()):
		for vlan in sorted(all_macs[if_index].keys()):

			port_type = get_port_type(if_index, index_trunk_cisco, index_nottrunk_cisco, index_trunk_hp, index_nottrunk_hp, index_portchannel_cisco)


			node_mac.append({
                        	"index"        : if_index,
                               	"description"  : ifDesc_dict.get(if_index, "UNKOWN"),
                              	"trunk"        : port_type,
                              	"vlan"         : vlan,
                               	"mac"          : ", ".join(["%s (%s)" % (mac, mac_vendor) for mac, mac_vendor in sorted(all_macs[if_index][vlan])])
                    	})

			if not "Trunk" in port_type or "Access" in port_type:
				for mac, mac_vendor in all_macs[if_index][vlan]:
					vendor_index = mac_vendor + " (" + mac[:8] + ")"
					
					if vendor_index not in count_macs:
						count_macs[vendor_index] = 0
					count_macs[vendor_index] += 1
				

	
	node_mac_vendor = inv_tree("networking.switch_mac_count:")
	for mac_vendor in sorted(count_macs.keys()):
		node_mac_vendor.append({
                                "vendor"         : mac_vendor,
                                "counter"        : count_macs[mac_vendor]
                        })




inv_info['switch_mac'] = {
    "inv_function" : inv_switch_mac,
    'includes':  [ 'mac.include', 'mac.db', 'mac_custom.db' ],
    'snmp_info': [
        ( ".1.3.6.1.2.1", [
           "2.2.1.1",            # ifIndex
           "2.2.1.2",            # ifDescr
           "31.1.1.1.18",        # ifAlias
           "2.2.1.3",            # ifType
           "2.2.1.8",            # ifOperStatus
        ]),                            
	('.1.3.6.1.2.1.1', ['5']),  #sysName
	oid_vlanTrunkPortDynamicStatus,
	oid_dot1qVlanCurrentEntry,
	oid_vmMembershipTable,
	oid_dot3adAggPortSelectedAggID 
    ],
    'snmp_scan_function':      lambda oid: oid(".1.3.6.1.2.1.1.1.0") != None,
}

