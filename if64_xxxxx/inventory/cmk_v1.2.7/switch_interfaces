#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Christian Burmeister

ifOperStatus = {
		"1":"up",
		"2":"down",
		"3":"testing",
		"4":"unknown",
		"5":"dormant",
		"6":"notPresent",
		"7":"lowerLayerDown"}




def inv_switch_interfaces(info, params):


    port_info, lldpRemSysName, lldpLocPortDesc, cdpCacheDeviceId, vmVoiceVlanId, vtpVlanName, \
    vlanTrunkPortDynamicStatus, dot1qVlanStaticName, vlanTrunkPortVlansEnabled, \
    dot3StatsDuplexStatus, vmMembershipTable, dot1qVlanCurrentEntry, dot3adAggPortSelectedAggID = info

    vmMembershipTable_dict = get_vmMembershipTable(vmMembershipTable)
    dot1qVlanCurrentEntry_index_dict = get_dot1qVlanCurrentEntry_index(dot1qVlanCurrentEntry)

    vlan_trunk_cisco_dict = get_vlan_trunk_cisco(vlanTrunkPortVlansEnabled)
    vlan_trunk_hp_dict    = get_vlan_trunk_hp(dot1qVlanCurrentEntry_index_dict)

    (index_trunk_cisco, index_nottrunk_cisco) = get_index_trunk_cisco(vlanTrunkPortDynamicStatus,vmMembershipTable_dict, return_access=True)
    (index_trunk_hp, index_nottrunk_hp)       = get_index_trunk_hp(dot1qVlanCurrentEntry, return_access=True)    
    index_portchannel_cisco = get_index_portchannel_cisco(dot3adAggPortSelectedAggID)

    info_neighbor = [port_info, lldpRemSysName, lldpLocPortDesc, cdpCacheDeviceId, [], []] 
    neighbor_lldp = get_neighbor_generic("LLDP", info_neighbor)
    neighbor_cdp  = get_neighbor_generic("CDP",  info_neighbor)


    dot1qVlanCurrentEntry_index_dict = get_dot1qVlanCurrentEntry_index(dot1qVlanCurrentEntry)


    node = inv_tree("networking.switch_interfaces:")
    for if_index, if_descr, if_alias, if_type, if_speed, if_high_speed, if_oper_status  in port_info:

	
        if if_type not in ( "6" ) and "Port-channel" not in if_descr and "Trk" not in if_descr:
            continue 

	if if_high_speed:
            speed = int(if_high_speed) * 1000 * 1000
        else:
            speed = int(if_speed)


	
	var_vlan       = get_vlan(if_index, vmMembershipTable_dict, vtpVlanName, dot1qVlanStaticName, dot1qVlanCurrentEntry_index_dict)
	var_port_type  = get_port_type(if_index, index_trunk_cisco, index_nottrunk_cisco,  index_trunk_hp, index_nottrunk_hp, index_portchannel_cisco)


	vlan_trunk = ""	
	if "Trunk (Cisco)" in var_port_type:
		
		if_vlan4k_info = vmMembershipTable_dict.get(if_index, "UNKNOWN")
		vlan_trunk =""
        	if if_vlan4k_info != "UNKNOWN":
                	vlan_trunk = vmMembershipTable_dict[if_index].get("vmVlans", "")
		

		if vlan_trunk == "":
			vlan_trunk = vlan_trunk_cisco_dict.get(if_index, "")
#			if var_vlan == "UNKNOWN" or "1 (" in var_vlan or "1" == var_vlan:
#				var_vlan = ""
#		else:	
#			vlan_trunk += " --vlan4K--"
#			if var_vlan == "1":
#                                var_vlan = ""

		
	if "Trunk (HP)" in var_port_type:
		vlan_trunk = vlan_trunk_hp_dict.get(if_index, "UNKNOWN") 


        node.append({
            "index"        : int(if_index),
            "description"  : if_descr,
            "alias"        : if_alias,
	    "speed"        : speed,
	    "oper_status"  : ifOperStatus[if_oper_status],
	    "dulpex_status": check_duplex(if_index, dot3StatsDuplexStatus),
	    "neighbor"     : get_neighbor_interface_string(if_index, neighbor_lldp, neighbor_cdp, include_platform=True),
            "vlan"         : var_vlan,
	    "vlan_voice"   : get_vlanvoice(if_index, vmVoiceVlanId, vtpVlanName, dot1qVlanStaticName, dot1qVlanCurrentEntry_index_dict),
	    "vlan_trunk"   : vlan_trunk,
	    "trunk"        : var_port_type,
        })
	

inv_info['switch_interfaces'] = {
    "inv_function" : inv_switch_interfaces,
    'includes':  [ 'if_network.include' ],
    'snmp_info': [
        ( ".1.3.6.1.2.1", [
           "2.2.1.1",            # ifIndex
           "2.2.1.2",            # ifDescr
           "31.1.1.1.18",        # ifAlias
           "2.2.1.3",            # ifType
           "2.2.1.5",            # ifSpeed
           "31.1.1.1.15",        # ifHighSpeed   .. 1000 means 1Gbit
           "2.2.1.8",            # ifOperStatus
        ]),
        oid_lldpRemSysName,
	oid_lldpLocPortDesc,
        oid_cdpCacheDeviceId,
        oid_vmVoiceVlanId,
        oid_vtpVlanName,
        oid_vlanTrunkPortDynamicStatus,
        oid_dot1qVlanStaticName, 
	oid_vlanTrunkPortVlansEnabled,
	oid_dot3StatsDuplexStatus,
	oid_vmMembershipTable,
	oid_dot1qVlanCurrentEntry,
	oid_dot3adAggPortSelectedAggID
    ],
#    'snmp_scan_function': lambda oid: int(oid(".1.3.6.1.2.1.2.1.0")) >= 2,
}
