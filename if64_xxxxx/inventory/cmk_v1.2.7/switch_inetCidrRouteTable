#!/usr/bpRouteProto_decode = {in/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Author: Christian Burmeister

"""

def get_inetCidrRouteTable(inetCidrRouteTable):
	inetCidrRouteTable_decode = { 
		"1":"inetCidrRouteDestType",		
		"2":"inetCidrRouteDest",
                "3":"inetCidrRoutePfxLen",
                "4":"inetCidrRoutePolicy",
                "5":"inetCidrRouteNextHopType",
                "6":"inetCidrRouteNextHop",
                "7":"inetCidrRouteIfIndex",
                "8":"inetCidrRouteType",
                "9":"inetCidrRouteProto",
                "10":"inetCidrRouteAge",
                "11":"inetCidrRouteNextHopAS",
                "12":"inetCidrRouteMetric1",
                "13":"inetCidrRouteMetric2",
                "14":"inetCidrRouteMetric3",
                "15":"inetCidrRouteMetric4",
                "16":"inetCidrRouteMetric5",
                "17":"inetCidrRouteStatus"}


	inetCidrRouteProto_decode = {
		"1":"other",
		"2":"local",
		"3":"netmgmt",
		"4":"icmp",
		"5":"egp",
		"6":"ggp",
		"7":"hello",
		"8":"rip",
		"9":"is-is",
		"10":"es-is",
		"11":"ciscoIgrp",
		"12":"bbnSpfIgp",
		"13":"ospf",
		"14":"bgp",
                "15":"idpr",
                "16":"ciscoEigrp",
                "17":"dvmrp"}

        inetCidrRouteType_decode = {
                "1":"other",
                "2":"reject",
                "3":"local",
                "4":"remote",
		"5":"blackhole"}



	inetCidrRouteTable_dict = {}
	for oid, value in inetCidrRouteTable:
		print oid, value
		oid_type =  oid.split(".")[0]
		oid_ip   =  ".".join(oid.split(".")[1:])

		print oid_type, oid_ip, inetCidrRouteTable_decode[oid_type]

		if oid_ip not in inetCidrRouteTable_dict.keys():
			inetCidrRouteTable_dict[oid_ip] = {}

		if inetCidrRouteTable_decode[oid_type] == "inetCidrRouteMask":
			mask_cidr = str(sum([bin(int(x)).count('1') for x in value.split('.')]))
			inetCidrRouteTable_dict[oid_ip].update( {"inetCidrRouteMask_cidr": mask_cidr} )
			inetCidrRouteTable_dict[oid_ip].update( {inetCidrRouteTable_decode[oid_type]:value} )

		elif inetCidrRouteTable_decode[oid_type] == "inetCidrRouteProto": 
			inetCidrRouteProto_desc = inetCidrRouteProto_decode[value]
			inetCidrRouteTable_dict[oid_ip].update( {inetCidrRouteTable_decode[oid_type]:inetCidrRouteProto_desc} )
                elif inetCidrRouteTable_decode[oid_type] == "inetCidrRouteType":
                        inetCidrRouteType_desc = inetCidrRouteType_decode[value]
                        inetCidrRouteTable_dict[oid_ip].update( {inetCidrRouteTable_decode[oid_type]:inetCidrRouteType_desc} )

		else:
			inetCidrRouteTable_dict[oid_ip].update( {inetCidrRouteTable_decode[oid_type]:value} )
	
	return inetCidrRouteTable_dict


def get_if_desc(port_info):
	ifDesc_dict = {}

	for interface in port_info:
		if_index = str(interface[0])
		if_desc  = interface[1]
		ifDesc_dict[if_index] = if_desc

	return ifDesc_dict


	

def inv_switch_inetCidrRouteTable(info, params):
    	port_info, inetCidrRouteTable = info


	"""
	inetCidrRouteTable_dict = get_inetCidrRouteTable(inetCidrRouteTable)
	ifDesc_dict = get_if_desc(port_info)
	

	routes = inv_tree("networking.switch_inetCidrRouteTable:")
	for route in inetCidrRouteTable_dict:
                routes.append({
			"inetCidrRouteDest"      : inetCidrRouteTable_dict[route]["inetCidrRouteDest"],
			"inetCidrRouteMask_cidr" : inetCidrRouteTable_dict[route]["inetCidrRouteMask_cidr"],
			"inetCidrRouteMask"      : inetCidrRouteTable_dict[route]["inetCidrRouteMask"],
                        "inetCidrRouteIfIndex"   : ifDesc_dict.get(inetCidrRouteTable_dict[route]["inetCidrRouteIfIndex"], ""),
                        "inetCidrRouteProto"     : inetCidrRouteTable_dict[route]["inetCidrRouteProto"],
                        "inetCidrRouteNextHop"   : inetCidrRouteTable_dict[route]["inetCidrRouteNextHop"],
			"inetCidrRouteType"      : inetCidrRouteTable_dict[route]["inetCidrRouteType"],
                })
	"""


inv_info['switch_inetCidrRouteTable'] = {
    "inv_function" : inv_switch_inetCidrRouteTable,
#    'includes':  [ 'if_network.include' ],
    'snmp_info': [
        ( ".1.3.6.1.2.1", [
           "2.2.1.1",            # ifIndex
           "2.2.1.2",            # ifDescr
           "31.1.1.1.18",        # ifAlias
           "2.2.1.3",            # ifType
        ]),
	(".1.3.6.1.2.1.4.24",                 [OID_END, "7.1"])	
    ],
#    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.4.24.7.*") != None,
}
"""
