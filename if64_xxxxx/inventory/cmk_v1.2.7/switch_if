#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.




def is_trunk(if_index, trunks_cisco,  trunks_hp):

    if if_index in trunks_cisco:
        return "Trunk (Cisco)"
    elif if_index in trunks_hp:
        return "Trunk (HP)"
    else:
        return False


def get_vlan(if_index, vmvlan, vtpVlanName, dot1qPortVlanEntry, dot1qVlanStaticName):
        if_vlan_cisco = ""
        if_vlan_hp    = ""


        # Cisco vlanid
        for index, vlan in vmvlan:
                if index == if_index:
                        if_vlan_cisco = vlan

        # Cisco vlanName
        if if_vlan_cisco != "":
                for vlanid, vlanname in vtpVlanName:
                        if vlanid == if_vlan_cisco:
                                if_vlan_cisco = "%s (%s)" % (if_vlan_cisco, vlanname)

        # HP vlanid
        for index, vlan in dot1qPortVlanEntry:
                if index == if_index:
                        if_vlan_hp = vlan

        # Cisco vlanName
        if if_vlan_hp != "":
                for vlanid, vlanname in dot1qVlanStaticName:
                        if vlanid == if_vlan_hp:
                                if_vlan_hp = "%s (%s)" % (if_vlan_hp, vlanname)

        if if_vlan_cisco == "" and if_vlan_hp == "":
                return "NO_Vlan"
        if if_vlan_cisco != "" and if_vlan_hp != "":
                return if_vlan_cisco + " - " + if_vlan_hp
        elif if_vlan_cisco != "" and if_vlan_hp == "":
                return if_vlan_cisco
        else:
                return if_vlan_hp

def get_vlanvoice(if_index, vmVoiceVlanId, vtpVlanName, dot1qVlanStaticEgressPorts):
        if_vlan = ""


        # Cisco vlanid
        for index, vlan in vmVoiceVlanId:
                if index == if_index:
                        if vlan == "4096":
                                # http://tools.cisco.com/Support/SNMP/do/BrowseOID.do?local=en&translate=Translate&objectInput=1.3.6.1.4.1.9.9.68.1.5.1.1.1
                                if_vlan = "NO_VoiceVlan"
                        else:
                                if_vlan = vlan 

        # Cisco vlanName
        if if_vlan != "":
                for vlanid, vlanname in vtpVlanName:
                        if vlanid == if_vlan:
                                if_vlan = "%s (%s)" % (if_vlan, vlanname)


        return if_vlan


               
def inv_switch_if(info, params):

    port_info, lldpRemSysName, cdpCacheDeviceId, \
    vmvlan, vmVoiceVlanId, vtpVlanName, \
    vlanTrunkPortDynamicStatus, \
    dot1qPortVlanEntry, dot1qVlanStaticName, \
    dot1qVlanStaticEntry, dot1qVlanStaticEgressPorts = info

    trunks_cisco = get_trunk_cisco(vlanTrunkPortDynamicStatus)
    trunks_hp    = get_trunk_hp(dot1qVlanStaticEntry)    
 
    (neighbor_lldp, neighbor_cdp) = get_neighbor_generic_all(lldpRemSysName, cdpCacheDeviceId)

    node = inv_tree("networking.switch_if:")
    for if_index, if_descr, if_alias, if_type  in port_info:

        if if_type not in ( "6" ):
            continue 


        node.append({
#            "index"        : int(if_index),
            "description"  : if_descr,
            "alias"        : if_alias,
            "neighbor"     : get_neighbor_interface_string(if_index, neighbor_lldp, neighbor_cdp, False, True),
            "vlan"         : get_vlan(if_index, vmvlan, vtpVlanName, dot1qPortVlanEntry, dot1qVlanStaticName),
            "vlan_voice"   : get_vlanvoice(if_index, vmVoiceVlanId, vtpVlanName, dot1qVlanStaticEgressPorts),
            "trunk"        : is_trunk(if_index, trunks_cisco,  trunks_hp),
        })



inv_info['switch_if'] = {
    "inv_function" : inv_switch_if,
    'includes':  [ 'cdp_lldp_dulpex.include' ],
    'snmp_info': [
        ( ".1.3.6.1.2.1", [
           "2.2.1.1",            # ifIndex
           "2.2.1.2",            # ifDescr
           "31.1.1.1.18",        # ifAlias
           "2.2.1.3",            # ifType
        ]),
        oid_lldpRemSysName,
        oid_cdpCacheDeviceId,
        (".1.3.6.1.4.1.9.9.68.1.2.2.1", [OID_END, "2"]),   #Cisco: vmVlan
        (".1.3.6.1.4.1.9.9.68.1.5.1.1", [OID_END, "1"]),   #Cisco: vmVoiceVlanId
        (".1.3.6.1.4.1.9.9.46.1.3.1.1", [OID_END, "4.1"]),   #Cisco: vtpVlanName
        oid_vlanTrunkPortDynamicStatus, 
        (".1.3.6.1.2.1.17.7.1.4.5.1",   [OID_END, "1"]),   #HP: dot1qPortVlanEntry
        (".1.3.6.1.2.1.17.7.1.4.3.1",   [OID_END, "1"]),   #HP: dot1qVlanStaticName
        oid_dot1qVlanStaticEntry,
        (".1.3.6.1.2.1.17.7.1.4.3.1",   [OID_END, "2" ]),   #HP: dot1qVlanStaticEgressPorts
    ],
    'snmp_scan_function': lambda oid: int(oid(".1.3.6.1.2.1.2.1.0")) >= 2,
}