#!/usr/bpRouteProto_decode = {in/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Author: Christian Burmeister

def get_ipCidrRouteTable(ipCidrRouteTable):
	ipCidrRouteTable_decode = { 		
		"1":"ipCidrRouteDest",
		"2":"ipCidrRouteMask",
                "3":"ipCidrRouteTos",
                "4":"ipCidrRouteNextHop",
                "5":"ipCidrRouteIfIndex",		
                "6":"ipCidrRouteType",
                "7":"ipCidrRouteProto",
                "8":"ipCidrRouteAge",
		"9":"ipCidrRouteInfo",
                "10":"ipCidrRouteNextHopAS",
		"11":"ipCidrRouteMetric1",
		"12":"ipCidrRouteMetric2",
		"13":"ipCidrRouteMetric3",
		"14":"ipCidrRouteMetric4",
		"15":"ipCidrRouteMetric5",
		"16":"ipCidrRouteStatus"}

	ipCidrRouteProto_decode = {
		"1":"other",
		"2":"local",
		"3":"netmgmt",
		"4":"icmp",
		"5":"egp",
		"6":"ggp",
		"7":"hello",
		"8":"rip",
		"9":"is-is",
		"10":"es-is",
		"11":"ciscoIgrp",
		"12":"bbnSpfIgp",
		"13":"ospf",
		"14":"bgp"}

        ipCidrRouteType_decode = {
                "1":"other",
                "2":"reject",
                "3":"local",
                "4":"remote"}



	ipCidrRouteTable_dict = {}
	for oid, value in ipCidrRouteTable:
		oid_type =  oid.split(".")[0]
		oid_ip   =  ".".join(oid.split(".")[1:])

		if oid_ip not in ipCidrRouteTable_dict.keys():
			ipCidrRouteTable_dict[oid_ip] = {}

		if ipCidrRouteTable_decode[oid_type] == "ipCidrRouteMask":
			mask_cidr = str(sum([bin(int(x)).count('1') for x in value.split('.')]))
			ipCidrRouteTable_dict[oid_ip].update( {"ipCidrRouteMask_cidr": mask_cidr} )
			ipCidrRouteTable_dict[oid_ip].update( {ipCidrRouteTable_decode[oid_type]:value} )

		elif ipCidrRouteTable_decode[oid_type] == "ipCidrRouteProto": 
			ipCidrRouteProto_desc = ipCidrRouteProto_decode[value]
			ipCidrRouteTable_dict[oid_ip].update( {ipCidrRouteTable_decode[oid_type]:ipCidrRouteProto_desc} )
                elif ipCidrRouteTable_decode[oid_type] == "ipCidrRouteType":
                        ipCidrRouteType_desc = ipCidrRouteType_decode[value]
                        ipCidrRouteTable_dict[oid_ip].update( {ipCidrRouteTable_decode[oid_type]:ipCidrRouteType_desc} )

		else:
			ipCidrRouteTable_dict[oid_ip].update( {ipCidrRouteTable_decode[oid_type]:value} )
	
	return ipCidrRouteTable_dict


def get_if_desc(port_info):
	ifDesc_dict = {}

	for interface in port_info:
		if_index = str(interface[0])
		if_desc  = interface[1]
		ifDesc_dict[if_index] = if_desc

	return ifDesc_dict


	

def inv_switch_ipCidrRoute(info, params):
    	port_info, ipCidrRouteTable = info
	ipCidrRouteTable_dict = get_ipCidrRouteTable(ipCidrRouteTable)
	ifDesc_dict = get_if_desc(port_info)


	routes = inv_tree("networking.switch_ipCidrRoute:")
	for route in ipCidrRouteTable_dict:
                routes.append({
			"ipCidrRouteDest"      : ipCidrRouteTable_dict[route]["ipCidrRouteDest"],
			"ipCidrRouteMask_cidr" : ipCidrRouteTable_dict[route]["ipCidrRouteMask_cidr"],
			"ipCidrRouteMask"      : ipCidrRouteTable_dict[route]["ipCidrRouteMask"],
                        "ipCidrRouteIfIndex"   : ifDesc_dict.get(ipCidrRouteTable_dict[route]["ipCidrRouteIfIndex"], ""),
                        "ipCidrRouteProto"     : ipCidrRouteTable_dict[route]["ipCidrRouteProto"],
                        "ipCidrRouteNextHop"   : ipCidrRouteTable_dict[route]["ipCidrRouteNextHop"],
			"ipCidrRouteType"      : ipCidrRouteTable_dict[route]["ipCidrRouteType"],
                })



inv_info['switch_ipCidrRoute'] = {
    "inv_function" : inv_switch_ipCidrRoute,
#    'includes':  [ 'if_network.include' ],
    'snmp_info': [
        ( ".1.3.6.1.2.1", [
           "2.2.1.1",            # ifIndex
           "2.2.1.2",            # ifDescr
           "31.1.1.1.18",        # ifAlias
           "2.2.1.3",            # ifType
        ]),
	(".1.3.6.1.2.1.4.24",                 [OID_END, "4.1"])	
    ],
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.4.24.4.*") != None,
}
