#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author Christian Burmeister

def fix_if64_highspeed(info):
    for line in info:
        if type(line[4]) == str: # not yet converted
            line[4] = saveint(line[4]) * 1000000


def inventory_if64(info):
    # Fix for switches like DLINK, with empty lines in MIB
    info = [ x for x in info if saveint(x[1]) > 0 ]
    fix_if64_highspeed(info)
    return inventory_if_common(info, has_nodeinfo = True)

def check_if64(item, params, info):
    fix_if64_highspeed(info)
    return check_if_common(item, params, info, has_nodeinfo = True)

def if64_scan_function(oid):
    ignored_strings = [
    "LANCOM",
    "Brocade VDX Switch",
    ]
    for string in ignored_strings:
        if string in oid(".1.3.6.1.2.1.1.1.0"):
            return False

    if ".4.1.11863." in oid(".1.3.6.1.2.1.1.2.0"):
        return False

    if if64_disabled(g_hostname):
        return False

    if oid(".1.3.6.1.2.1.31.1.1.1.6.*") != None:
        return True
    return False


#---Eigene Methoden-----------------------------------------------------------------------

def list_find(item, list):
        found = False
        for i in list:
                if item.lower().find(i.lower()) != -1:
                        found = True
                        break

        return found



def get_neighbor(interface, lldpRemSysName, cdpCacheDeviceId, use_raw_neighbor=False):
        ifAlias = interface[18]
        ifAlias_raw_neighbor = None
        neighbor_found = False

        neighbor_info_all = []
        #---- LLDP
        for lldp in lldpRemSysName:
                if lldp == None:
                        continue
                if interface[0] == lldp[0].split(".")[1]:
                        if len(lldp[1]) > 0:
                                neighbor_found = True



                                lldpRemPortDesc = str(lldp[1])
                                lldpRemSysName  = str(lldp[2])
                                lldpRemSysDesc  = str(lldp[3])

                                neighbor_info_all.append( ("LLDP", lldpRemSysName, lldpRemPortDesc, lldpRemSysDesc) )
        #---- CDP
        if not neighbor_found:
                for cdp in cdpCacheDeviceId: 
                        if cdp == None:
                                continue
                        if interface[0] == cdp[0].split(".")[0]:
                                if len(cdp[1]) > 0:
                                        neighbor_found = True

                                        cdpCacheDeviceId = str(cdp[1]).split("(")[0] 
                                        cdpCacheDevicePort = str(cdp[2])
                                        cdpCachePlatform = str(cdp[3])

                                        if "cisco AIR-CAP" in cdpCachePlatform:
                                                cdpCacheDeviceId = "AP__" + cdpCacheDeviceId
                                                cdpCacheDevicePort = "IGNORE"

                                        neighbor_info_all.append( ("CDP", cdpCacheDeviceId, cdpCacheDevicePort, cdpCachePlatform) )

        if use_raw_neighbor:

                neighbor_ignore = ['MSI on Windows', "VMware ESX", "VMware"]

                if_neighbor = ""
                if len(neighbor_info_all) > 0:
                        neighbor_info_all = sorted(neighbor_info_all)

                        if len(neighbor_info_all) == 1:
                                (typ, device, port, platform) = neighbor_info_all[0]

                                if list_find(platform, neighbor_ignore):
                                        if_neighbor = None
                                else:
                                        if_neighbor =  "%s...%s" % (device, port)
                        else:
                                if_neighbor_list = []
                                for (typ, device, port, platform) in neighbor_info_all:

                                        if list_find(platform, neighbor_ignore):
                                                #if_neighbor.append(None)
                                                pass
                                        else:
                                                if_neighbor_list.append( "%s...%s" % (device, port) )

                                if len(if_neighbor_list) == 0:
                                        if_neighbor = None
                                elif len(if_neighbor_list) == 1:
                                        if_neighbor = if_neighbor_list[0]
                                else:
                                        if_neighbor = if_neighbor_list
                        return str(if_neighbor)
                else:

                        if_neighbor = None
                        return str(if_neighbor)                  

        else:
                if len(neighbor_info_all) > 0:
                        neighbor_info_all = sorted(neighbor_info_all)
                        neighbor_info_list = []

                        if len(neighbor_info_all) == 1:
                                (typ, device, port, platform) = neighbor_info_all[0]
                                if interface[18] == "":
                                        ifAlias =  "%s: %s...%s -- ifAlias: NO_ALIAS" % (typ, device, port)
                                else:
                                        ifAlias =  "%s: %s...%s -- ifAlias: %s"       % (typ, device, port, interface[18])
                        else:
                                neighbor_typ = ""
                                device_port_all = []
                                for (typ, device, port, platform) in neighbor_info_all:
                                        neighbor_typ = typ
                                        device_port_all.append( "%s...%s" % (device, port) )

                                if interface[18] == "":
                                        ifAlias =  "%s: %s -- ifAlias: NO_ALIAS" % (neighbor_typ, " - ".join(device_port_all))
                                else:
                                        ifAlias =  "%s: %s -- ifAlias: %s"       % (neighbor_typ, " - ".join(device_port_all), interface[18])


                        return str(ifAlias)
                else: 
                        ifType_ethernet = ["6", "62", "117"]

                        if len(lldpRemSysName) == 1 and len(cdpCacheDeviceId) == 1:
                                ifAlias =  "ifAlias_: " + interface[18]
                        elif list_find(interface[2], ifType_ethernet):
                                ifAlias =  "ifAlias: " + interface[18] + " -- NO_CDP-LLDP"
                        else:
                                ifAlias =  "ifAlias: " + interface[18] 
                        return str(ifAlias)





def check_duplex(interface, dot3StatsDuplexStatus):

        ifAlias = interface[18]
        if len(dot3StatsDuplexStatus) >= 1:
                for if_duplex in dot3StatsDuplexStatus:
                        if if_duplex != None:
                                if interface[0] == if_duplex[0]:
                                        dot3StatsDuplexStatus_unknown = "1"
                                        dot3StatsDuplexStatus_halfDuplex = "2"
                                        dot3StatsDuplexStatus_fullDuplex = "3"
                                        if if_duplex[1] == dot3StatsDuplexStatus_halfDuplex:
                                                ifAlias = "DuplexStats: halfDuplex -- " + interface[18]
        return ifAlias



def inventory_if64_params_neighbor(if_info, lldpRemSysName, cdpCacheDeviceId):

    item_params = inventory_if64(if_info)


    neighbor_map = {}
    for interface in if_info:
        if interface == None:
                continue
        ifDescr = interface[2]
        neighbor_map[ifDescr] =  get_neighbor(interface[1:], lldpRemSysName, cdpCacheDeviceId, True)

    new_item_parmas = []
    for (item, params) in item_params:
        params = eval(params)



        neighbor = {"neighbor": None}
        for ifDescr in neighbor_map.keys():
                if ifDescr == item:
                        if item in neighbor_map.keys():
                                neighbor = {"neighbor": neighbor_map[ifDescr]}
                                break

        params.update(neighbor)
        new_item_parmas.append( (item, params) )

  
    return new_item_parmas


def check_if64_neighbor_interface(interface, lldpRemSysName, cdpCacheDeviceId, params, item):
        warn = 1
        return_state = 4
        output = None


        old_neighbor = str(params.get("neighbor", "NO_NEIGHBOR_SAVED"))
        current_neighbor = get_neighbor(interface, lldpRemSysName, cdpCacheDeviceId, True)

        if old_neighbor !=  current_neighbor:
                interface[18] = "NEIGHBOR_CHANGED: old_neighbor: " + old_neighbor +  " -------------- " + interface[18]

                output = check_if64(item, params, [[None] + interface])

                if output[0] < 1:
                        output = (warn,) + output[1:]
                elif output[0] == 2 and output[1].find("(down)(!!)") != -1:
                        output = (output[0], output[1].replace("NEIGHBOR_CHANGED:", "INTERFACE DOWN:") )

        elif interface[18].find("IP Phone") != -1:
                interface[18] = interface[18].replace("IP Phone","LLDP: Test IP Phone --Bitte Port als Access-Port konfigurieren!-- ")

                output = check_if64(item, params, [[None] + interface])
                if output[0] < 1:
                        output = (warn,) + output[1:]
        elif interface[18].find("DuplexStats:") != -1:
                output = check_if64(item, params, [[None] + interface])
                if output[0] < 1:
                        output = (warn,) + output[1:]
        else:
                output = check_if64(item, params, [[None] + interface])


        return output