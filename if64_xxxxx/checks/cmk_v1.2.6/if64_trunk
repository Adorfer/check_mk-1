#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author Christian Burmeister

#------------------------------------------------------------------------------
#check_mk -nv  --checks if64_trunk  SW671010_20 --debug
#Test Inventory: check_mk --checks if64_trunk -I asw0060
#Test Check: check_mk --checks if64_trunk  asw0060

#local_enable_if_trunk = False
#inventory_if_trunk_rules = []


def get_trunks(info):
    index_trunks = []
    index_po = []
    index_cdp_lldp = []

    if_all = info[0]
    vlanTrunkPortDynamicStatus  = info[1]
    dot3adAggPortSelectedAggID  = info[2]
    dot1qVlanStaticEntry        = info[3]
    cdpCacheDeviceId            = info[5]
    lldpRemSysName              = info[4]

     
    # find Cisco Trunks
    if len(vlanTrunkPortDynamicStatus) > 0:
        for cisco_if in vlanTrunkPortDynamicStatus:
                if cisco_if == None:
                        continue
                is_cisco_trunk = '1'
                if cisco_if[1] == is_cisco_trunk:
                        index_trunks.append(cisco_if[0])
    # Port-Channel
    if len(dot3adAggPortSelectedAggID) > 0:
        for cisco_if in dot3adAggPortSelectedAggID:
                if cisco_if == None:
                        continue
                is_no_etherchannel = '0'
                if cisco_if[1] > is_no_etherchannel:
                        index_po.append(cisco_if[0])

    #LLDP
    if len(lldpRemSysName) > 0:
        lldp_found = ["cisco", "ProCurve"]
        lldp_ignore = ["Phone", "ATA"]

        for hp_if in lldpRemSysName:
                if hp_if == None:
                        continue

                lldpRemSysDesc = hp_if[3]
                if list_find(lldpRemSysDesc,lldp_found) and not list_find(lldpRemSysDesc,lldp_ignore):
                        index_cdp_lldp.append(hp_if[0].split(".")[1])

    # CDP
    if len(cdpCacheDeviceId) > 0:
        cdp_found = ["cisco", "ProCurve"]
        cdp_ignore = ["Phone", "ATA"]

        for cisco_if in cdpCacheDeviceId:
                if cisco_if == None:
                        continue

                cdpCachePlatform = cisco_if[3]
                if list_find(cdpCachePlatform,cdp_found) and not list_find(cdpCachePlatform,cdp_ignore):
                        index_cdp_lldp.append(cisco_if[0].split(".")[0])
    
    # Ignore LLDP and CDP if interfaceType "propVirtual(53)"
    if len(index_cdp_lldp) > 0:
        ignore_ifType = ['53']
        new_index_cdp_lldp = []

        for interface in if_all:
                if interface == None: 
                        continue
                if interface[0] in index_cdp_lldp:
                        if interface[2] not in ignore_ifType:
                                new_index_cdp_lldp.append(interface[0])

        index_cdp_lldp = new_index_cdp_lldp

    # find HP Trunks
    if len(dot1qVlanStaticEntry) > 0:
        hp_available_vlan_byte = []
        for hp_vlan in dot1qVlanStaticEntry:
                if hp_vlan == None:
                        continue
                vlan1 = "1"
                if hp_vlan[0] != vlan1:
                        hp_available_vlan_byte.append(hp_vlan)
     
        hp_available_vlan_bin = []
        for vlan_byte in hp_available_vlan_byte:
                # Beispiel vlan_byte = ['10', '\xff\xff\xf8\x00\x00\x00\x00\x00']
                hex_string =  "".join ([ "%02X" % ord( x ) for x in list(vlan_byte[1])])

                # Beispiel hex_string = FFFFF80000000000
                bin_string =  "".join(["{0:04b}".format(int(c,16)) for c in hex_string])

                # Beispiel bin_string = 1111111111111111111110000000000000000000000000000000000000000000
                hp_available_vlan_bin.append(bin_string)
   
        if len(hp_available_vlan_bin) > 0:
                min_length = min([len(if_all),  len(hp_available_vlan_bin[0])])
                for i in range(min_length):
                        if_is_tagged = True
                        for j in range(len(hp_available_vlan_bin)):
                              if_untagged = "1"
                              if hp_available_vlan_bin[j][i] == if_untagged:
                               if_is_tagged = False
                        if if_is_tagged:
                              index_trunks.append(str(i+1))


   
    # return Trunk Interfaces (hp or cisco) 
    if_trunks = [] 
    for interface in if_all:
        if interface == None:
                continue
        elif interface[0] in index_trunks:
                interface[1] =  "If_Trunk " + interface[1]
                if_trunks.append([None] + interface) 
        elif interface[0] in index_po:
                interface[1] =  "If_Po " + interface[1]
                if_trunks.append([None] + interface)
        elif interface[0] in index_cdp_lldp:
                interface[1] =  "If_CDP/LLDP " + interface[1]
                if_trunks.append([None] + interface)
   
    return if_trunks


def replace_if64_trunk_ifdescr(ifDescr):
        return ifDescr.replace("If_Trunk ","").replace("If_CDP/LLDP ","").replace("If_Po ","").strip()


def inventory_if64_trunk(info):

#    settings = host_extra_conf_merged(g_hostname, inventory_if_trunk_rules)
#    param_enable_if_trunk    = settings.get('enable_if_trunk', local_enable_if_trunk)

#    if not param_enable_if_trunk:
#        return []

    cdpCacheDeviceId            = info[5]
    lldpRemSysName              = info[4]

    if_trunk = get_trunks(info)

    return inventory_if64_params_neighbor(if_trunk, lldpRemSysName, cdpCacheDeviceId)


def check_if64_trunk(item, params, info):
    info_if64_check = []
    item = replace_if64_trunk_ifdescr(item)

    if_all = info[0]
    vlanTrunkPortDynamicStatus  = info[1]
    dot3adAggPortSelectedAggID  = info[2]
    dot1qVlanStaticEntry        = info[3]
    cdpCacheDeviceId            = info[5]
    lldpRemSysName              = info[4]
    dot3StatsDuplexStatus       = info[6]



    for interface in if_all:
        if interface == None:
                continue


        interface[1] = replace_if64_trunk_ifdescr(interface[1])
        info_if64_check.append([None] + interface)

        if interface[1] == item:

                #CDP und LLDP
                ifAlias = get_neighbor(interface, lldpRemSysName, cdpCacheDeviceId)
                interface[18] =  ifAlias

                ifAlias = check_duplex(interface, dot3StatsDuplexStatus)
                interface[18] =  ifAlias

                return check_if64_neighbor_interface(interface, lldpRemSysName, cdpCacheDeviceId, params, item)

    return check_if64(item, params, info_if64_check)


def if64_trunk_scan_function(oid):
    if oid(".1.3.6.1.4.1.9.9.46.1.6.1.1.14.*") != None:
        return True
    if oid(".1.3.6.1.2.1.17.7.1.4.3.1.4.*") != None:
        return True
    return False


check_info["if64_trunk"] = {
    'check_function':          check_if64_trunk,
    'inventory_function':      inventory_if64_trunk,
    'service_description':     "%s",
    'has_perfdata':            True,
    'includes':                [ 'if.include', 'cdp_lldp_dulpex.include' ],
    'snmp_info':               [( ".1.3.6.1.2.1", [
        "2.2.1.1",      # ifIndex                   0
        "2.2.1.2",      # ifDescr                   1
        "2.2.1.3",      # ifType                    2
        "31.1.1.1.15",  # ifHighSpeed               .. 1000 means 1GBit
        "2.2.1.8",      # ifOperStatus              4
        "31.1.1.1.6",   # ifHCInOctets              5
        "31.1.1.1.7",   # ifHCInUcastPkts           6
        "31.1.1.1.8",   # ifHCInMulticastPkts       7
        "31.1.1.1.9",   # ifHCInBroadcastPkts       8
        "2.2.1.13",     # ifInDiscards              9
        "2.2.1.14",     # ifInErrors               10
        "31.1.1.1.10",  # ifHCOutOctets            11
        "31.1.1.1.11",  # ifHCOutUcastPkts         12
        "31.1.1.1.12",  # ifHCOutMulticastPkts     13
        "31.1.1.1.13",  # ifHCOutBroadcastPkts     14
        "2.2.1.19",     # ifOutDiscards            15
        "2.2.1.20",     # ifOutErrors              16
        "2.2.1.21",     # ifOutQLen                17
        "31.1.1.1.18",  # ifAlias                  18
        "2.2.1.6",      # ifPhysAddress            19
    ]), 
        (".1.3.6.1.4.1.9.9.46.1.6.1.1",   [OID_END, "14"]),   #Cisco: vlanTrunkPortDynamicStatus 
        (".1.2.840.10006.300.43.1.2.1.1", [OID_END, "12"]),   #Cisco: dot3adAggPortSelectedAggID
        (".1.3.6.1.2.1.17.7.1.4.3.1",     [OID_END, "4" ]),   #HP: dot1qVlanStaticEntry
        (".1.0.8802.1.1.2.1.4.1.1",       [OID_END, "8", "9", "10" ]),   #HP: lldpRemSysName
        (".1.3.6.1.4.1.9.9.23.1.2.1.1",   [OID_END, "6", "7", "8" ]),   #Cisco: cdpCacheDeviceId
        (".1.3.6.1.2.1.10.7.2.1",         [OID_END, "19"]),   #All: dot3StatsDuplexStatus 
    ],
    'snmp_scan_function'        : if64_trunk_scan_function,
    'group'                     : 'if',
    'node_info'                 : True,
    'default_levels_variable'   : 'if_default_levels',
}