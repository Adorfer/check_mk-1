#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


#------------------------------------------------------------------------------
#check_mk -nv  --checks if64_trunk  SW671010_20 --debug
#Test Inventory: check_mk --checks if64_trunk -I asw0060
#Test Check: check_mk --checks if64_trunk  asw0060


neighbor_search = ["cisco ", "ProCurve "]
neighbor_ignore = ["IP Phone", " ATA "]

def get_trunks(info):

    if_all = info[0]
    vlanTrunkPortDynamicStatus  = info[1]
    dot3adAggPortSelectedAggID  = info[2]
    dot1qVlanStaticEntry        = info[3]
    cdpCacheDeviceId            = info[5]
    lldpRemSysName              = info[4]


    port_channel = get_port_channel(dot3adAggPortSelectedAggID)

    trunks_cisco = get_trunk_cisco(vlanTrunkPortDynamicStatus)
    trunks_hp    = get_trunk_hp(dot1qVlanStaticEntry)


    (neighbor_lldp, neighbor_cdp) = get_neighbor_generic_all(lldpRemSysName, cdpCacheDeviceId, neighbor_ignore, neighbor_search)


    index_neighbor = neighbor_lldp.keys() + neighbor_cdp.keys()

 
    # Ignore LLDP and CDP if interfaceType "propVirtual(53)"
    if len(index_neighbor) > 0:
        ignore_ifType = ['53']
        new_index_neighbor = []

        for interface in if_all:
                if interface == None: 
                        continue
                if interface[0] in index_neighbor:
                        if interface[2] not in ignore_ifType:
                                new_index_neighbor.append(interface[0])

        index_neighbor = new_index_neighbor

   
    # return Trunk Interfaces (hp or cisco) 
    if_trunks = [] 
    for interface in if_all:
        if interface == None:
                continue
        elif interface[0] in trunks_cisco + trunks_hp:
                interface[1] =  "If_Trunk " + interface[1]
                if_trunks.append([None] + interface) 
        elif interface[0] in port_channel:
                interface[1] =  "If_Po " + interface[1]
                if_trunks.append([None] + interface)
        elif interface[0] in index_neighbor:
                interface[1] =  "If_CDP/LLDP " + interface[1]
                if_trunks.append([None] + interface)
 
    return if_trunks


def replace_if64_trunk_ifdescr(ifDescr):
        return ifDescr.replace("If_Trunk ","").replace("If_CDP/LLDP ","").replace("If_Po ","").strip()


def inventory_if64_trunk(info):

    cdpCacheDeviceId            = info[5]
    lldpRemSysName              = info[4]

    if_trunk = get_trunks(info)

    return inventory_if64_params_neighbor(if_trunk, lldpRemSysName, cdpCacheDeviceId, neighbor_ignore, neighbor_search)


def check_if64_trunk(item, params, info):
    info_if64_check = []
    item = replace_if64_trunk_ifdescr(item)

    if_all = info[0]
    vlanTrunkPortDynamicStatus  = info[1]
    dot3adAggPortSelectedAggID  = info[2]
    dot1qVlanStaticEntry        = info[3]
    cdpCacheDeviceId            = info[5]
    lldpRemSysName              = info[4]
    dot3StatsDuplexStatus       = info[6]


    for interface in if_all:
        if interface == None:
                continue

        interface[1] = replace_if64_trunk_ifdescr(interface[1])
        info_if64_check.append([None] + interface)

        if interface[1] == item:
                return check_if64_neighbor_interface(interface, lldpRemSysName, cdpCacheDeviceId, neighbor_ignore, neighbor_search, params, item, dot3StatsDuplexStatus)

    return check_if64_original(item, params, info_if64_check)


def if64_trunk_scan_function(oid):
    if oid(".1.3.6.1.4.1.9.9.46.1.6.1.1.14.*") != None and if64_scan_function(oid, False) == True:
        return True
    if oid(".1.3.6.1.2.1.17.7.1.4.3.1.4.*") != None and if64_scan_function(oid, False) == True:
        return True
    return False


check_info["if64_trunk"] = {
    'check_function':          check_if64_trunk,
    'inventory_function':      inventory_if64_trunk,
    'service_description':     "%s",
    'has_perfdata':            True,
    'includes':                [ 'if.include', 'cdp_lldp_dulpex.include' ],
    'snmp_info':               [( ".1.3.6.1.2.1", if64_snmp_end_oids),
                                oid_vlanTrunkPortDynamicStatus, 
                                oid_dot3adAggPortSelectedAggID, 
                                oid_dot1qVlanStaticEntry,       
                                oid_lldpRemSysName,             
                                oid_cdpCacheDeviceId,           
                                oid_dot3StatsDuplexStatus,      
    ],
    'snmp_scan_function'        : if64_trunk_scan_function,
    'group'                     : 'if',
    'node_info'                 : True,
    'default_levels_variable'   : 'if_default_levels',
}