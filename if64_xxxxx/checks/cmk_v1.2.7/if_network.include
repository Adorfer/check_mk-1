#!/usr/bin/python

# Author: Christian Burmeister

"""
# fuer CMK 1.2.6

def fix_if64_highspeed(info):
	for line in info:
		if type(line[4]) == str: # not yet converted
			line[4] = saveint(line[4]) * 1000000


def inventory_if64_original(info):
	# Fix for switches like DLINK, with empty lines in MIB
	info = [ x for x in info if saveint(x[1]) > 0 ]
	fix_if64_highspeed(info)
	return inventory_if_common(info, has_nodeinfo = True)

def check_if64_original(item, params, info):
	fix_if64_highspeed(info)
	return check_if_common(item, params, info, has_nodeinfo = True)

def if64_scan_function_original(oid):
	ignored_strings = [
	"LANCOM",
	"Brocade VDX Switch",
	]
	for string in ignored_strings:
		if string in oid(".1.3.6.1.2.1.1.1.0"):
			return False

	if ".4.1.11863." in oid(".1.3.6.1.2.1.1.2.0"):
		return False

	if if64_disabled(g_hostname):
		return False

	if oid(".1.3.6.1.2.1.31.1.1.1.6.*") != None:
		return True
	return False
"""

# fuer cmk 1.27
def inventory_if64_original(info):
	parse_if64(info)
	return inventory_if_common(parse_if64(info), has_nodeinfo = True)

def check_if64_original(item, params, info):
	return check_if_common(item, params, parse_if64(info), has_nodeinfo = True)

def if64_scan_function_orignial(oid):
	return if64_scan_function(oid, False)


#################################################################################################################
# Allgemein
#################################################################################################################

def list_find(item, list):
	found = False
	for i in list:
		if item.lower().find(i.lower()) != -1:
			found = True
			break

	return found




#################################################################################################################
# Trunks 
#################################################################################################################

oid_vlanTrunkPortDynamicStatus  = (".1.3.6.1.4.1.9.9.46.1.6.1.1", [OID_END, "14"])
#oid_dot1qVlanStaticEntry        = (".1.3.6.1.2.1.17.7.1.4.3.1", [OID_END, "4" ])
oid_vmMembershipTable 		= (".1.3.6.1.4.1.9.9.68.1.2.2.1", [OID_END, "1", "2", "3", "4", "5", "6", "7" ])
oid_dot1qVlanCurrentEntry       = (".1.3.6.1.2.1.17.7.1.4.2.1", [OID_END, "4", "5" ])

def get_port_type(if_index, index_trunk_cisco, index_nottrunk_cisco,  index_trunk_hp, index_nottrunk_hp, index_portchannel_cisco):

    if if_index in index_trunk_cisco:
        return "Trunk (Cisco)"
    elif if_index in index_portchannel_cisco:
        return "Member of PortChannel (Cisco)"
    elif if_index in index_nottrunk_cisco:
        return "Access (Cisco)"
    elif if_index in index_trunk_hp:
        return "Trunk (HP)"
    elif if_index in index_nottrunk_hp:
        return "Access (HP)"
    else:
        return ""

def get_vmMembershipTable(vmMembershipTable):

        vmVlanType_decode = {
                "1":"static",
                "2":"dynamic",
                "3":"multiVlan",
        }

        vmPortStatus_decode = {
                "1":"inactive",
                "2":"active",
                "3":"shutdown",
        }

        vmMembershipTable_dict = {}
        for interface_vlan in vmMembershipTable:
                (if_index, vmVlanType, vmVlan, vmPortStatus, vmVlans, vmVlans2k, vmVlans3k, vmVlans4k,) = interface_vlan

                if if_index not in vmMembershipTable_dict.keys():
                        vmMembershipTable_dict[if_index] = {}

                vmMembershipTable_dict[if_index].update( {"vmVlanType":vmVlanType_decode[vmVlanType] } )
                vmMembershipTable_dict[if_index].update( {"vmVlan":vmVlan } )
                vmMembershipTable_dict[if_index].update( {"vmPortStatus":vmPortStatus_decode[vmPortStatus] } )

                if vmVlans != "":
                        bin_string   = convert_vlan_hex2bin(vmVlans)
			bin_string2k = convert_vlan_hex2bin(vmVlans2k)
			bin_string3k = convert_vlan_hex2bin(vmVlans3k)
			bin_string4k = convert_vlan_hex2bin(vmVlans4k)


			all_vmVlans = ", ".join( convert_vlan_bin2list(bin_string  , 1) + convert_vlan_bin2list(bin_string2k, 1024) +
                        		convert_vlan_bin2list(bin_string3k, 2048) + convert_vlan_bin2list(bin_string4k, 3096)
			)


                    
                        vmMembershipTable_dict[if_index].update( {"vmVlans":all_vmVlans })

        return vmMembershipTable_dict

def get_index_trunk_cisco(vlanTrunkPortDynamicStatus, vmMembershipTable_dict={}, return_access= False):
	index_trunk_cisco = []
	index_nottrunk_cisco = []

	# find Cisco Trunks
	if len(vlanTrunkPortDynamicStatus) > 0:
		for cisco_if in vlanTrunkPortDynamicStatus:
			if cisco_if == None:
				continue
			is_trunking = '1'
			is_notTrunking = '2'
			if cisco_if[1] == is_trunking:
				index_trunk_cisco.append(cisco_if[0])
			elif cisco_if[1] == is_notTrunking:
				index_nottrunk_cisco.append(cisco_if[0])

	
	# only for Cisco Nexus with Trunks on Fex
	vmVlanType_found = False
	for if_index in vmMembershipTable_dict.keys():
		if vmMembershipTable_dict[if_index]["vmVlanType"] == 'multiVlan':
			if if_index not in index_trunk_cisco:
				index_trunk_cisco.append(if_index)
				vmVlanType_found = True

	if vmVlanType_found:
		for if_index in vmMembershipTable_dict.keys():
			if vmMembershipTable_dict[if_index]["vmVlanType"] == 'static':
				index_nottrunk_cisco.append(if_index)
	


	index_trunk_cisco = list(set(index_trunk_cisco))
	index_nottrunk_cisco = list(set(index_nottrunk_cisco))
	if return_access:
		return (index_trunk_cisco, index_nottrunk_cisco)
	else:
		return index_trunk_cisco 


def convert_vlan_hex2bin(vlan_hex_list):
	# Beispiel hex_value = '\xff\xff\xf8\x00\x00\x00\x00\x00'
        hex_string =  "".join ([ "%02X" % ord( x ) for x in list(vlan_hex_list)])
       	# Beispiel hex_string = FFFFF80000000000
       	bin_string =  "".join(["{0:04b}".format(int(c,16)) for c in hex_string])
        # Beispiel bin_string = 1111111111111111111110000000000000000000000000000000000000000000

	return bin_string

def convert_vlan_bin2list(bin_string, offset = 0):
	vlan_list =[]
      	for index in range(len(bin_string)):
        	if bin_string[index] == "1":
                	vlan_list.append(str(offset + index))
        return vlan_list
	

def get_dot1qVlanCurrentEntry_index(dot1qVlanCurrentEntry):
        dot1qVlanCurrentEntry_dict ={}
        dot1qVlanCurrentEntry_index_dict = {}
        for oid in dot1qVlanCurrentEntry:
		if oid == None: 
			continue

                vlan = oid[0].replace("0.","")
                offset = 1
                dot1qVlanCurrentEgressPorts_list   = convert_vlan_bin2list(convert_vlan_hex2bin(oid[1]),offset)
                dot1qVlanCurrentUntaggedPorts_list = convert_vlan_bin2list(convert_vlan_hex2bin(oid[2]),offset)

                max_ports = len(convert_vlan_hex2bin(oid[2]))

                dot1qVlanCurrentEntry_dict[vlan] = {"dot1qVlanCurrentEgressPorts":dot1qVlanCurrentEgressPorts_list,
                                                    "dot1qVlanCurrentUntaggedPorts":dot1qVlanCurrentUntaggedPorts_list}


                all_ports = set(dot1qVlanCurrentEntry_dict[vlan]["dot1qVlanCurrentEgressPorts"] + dot1qVlanCurrentEntry_dict[vlan]["dot1qVlanCurrentUntaggedPorts"])

                for if_index in all_ports:
                        tagged   = False
                        untagged = False

                        if if_index in dot1qVlanCurrentEntry_dict[vlan]["dot1qVlanCurrentEgressPorts"]:
                                tagged = True
                        if if_index in dot1qVlanCurrentEntry_dict[vlan]["dot1qVlanCurrentUntaggedPorts"]:
                                untagged = True

                        if tagged or untagged:
                                if if_index not in dot1qVlanCurrentEntry_index_dict:
                                        dot1qVlanCurrentEntry_index_dict[if_index] = {}
                                        dot1qVlanCurrentEntry_index_dict[if_index]["untagged"] = []
                                        dot1qVlanCurrentEntry_index_dict[if_index]["tagged"]   = []
                                if untagged:
                                        dot1qVlanCurrentEntry_index_dict[if_index]["untagged"].append(vlan)
                                elif tagged:
                                        dot1qVlanCurrentEntry_index_dict[if_index]["tagged"].append(vlan)

        return dot1qVlanCurrentEntry_index_dict


def get_index_trunk_hp(dot1qVlanCurrentEntry, return_access = False):
	dot1qVlanCurrentEntry_index_dict = get_dot1qVlanCurrentEntry_index(dot1qVlanCurrentEntry)
	index_trunk_hp = []
	index_nottrunk_hp = []


	for if_index in dot1qVlanCurrentEntry_index_dict:
		if len(dot1qVlanCurrentEntry_index_dict[if_index]['tagged']) > 1:
			index_trunk_hp.append(if_index)
		else:
			index_nottrunk_hp.append(if_index)

        if return_access:
                return (index_trunk_hp, index_nottrunk_hp)
        else:
                return index_trunk_hp
	
	


#################################################################################################################
# IP-Adressen
#################################################################################################################

oid_ipAdEntAddr                 = (".1.3.6.1.2.1.4.20.1",               ["2", OID_END])
oid_ipAdEntNetMask              = (".1.3.6.1.2.1.4.20.1",               [OID_END, "3"]) 

def get_ip_address_raw(ipAdEntAddr, ipAdEntNetMask):
	ipAdEntNetMask_dict = {}

	for value in ipAdEntNetMask:
		if value == None: continue
		(ip, mask) = value
		mask_cidr = sum([bin(int(x)).count('1') for x in mask.split('.')]) 
		ipAdEntNetMask_dict[ip] = (mask,  str(mask_cidr))

	ipAddress_dict = {}
	for ip in ipAdEntAddr:
		if ip == None: continue
		if_index = ip[0]
		if if_index not in ipAddress_dict.keys():
				ipAddress_dict[if_index] = []
		ipAddress_dict[if_index].append("%s/%s" % (ip[1], ipAdEntNetMask_dict[ip[1]][1]))

	return ipAddress_dict

#################################################################################################################
# Port channel
#################################################################################################################

oid_dot3adAggPortSelectedAggID  = (".1.2.840.10006.300.43.1.2.1.1",     [OID_END, "12"])

def get_index_portchannel_cisco(dot3adAggPortSelectedAggID):
	index_portchannel_cisco = []

	if len(dot3adAggPortSelectedAggID) > 0:
		for cisco_if in dot3adAggPortSelectedAggID:
			if cisco_if == None:
				continue
			is_no_etherchannel = '0'
			if cisco_if[1] > is_no_etherchannel:
				index_portchannel_cisco.append(cisco_if[0])

	return index_portchannel_cisco



#################################################################################################################
# CDP/LLDP
#################################################################################################################

oid_lldpRemSysName              = (".1.0.8802.1.1.2.1.4.1.1",           [OID_END, "8", "9", "10" ])
oid_lldpLocPortDesc             = (".1.0.8802.1.1.2.1.3.7.1",           [OID_END, "4" ])
oid_cdpCacheDeviceId            = (".1.3.6.1.4.1.9.9.23.1.2.1.1",       [OID_END, "6", "7", "8" ])


def replace_if64_trunk_ifdescr(ifDescr):
    	return ifDescr.replace("If_Trunk ","").replace("If_CDP/LLDP ","").replace("If_Po ","").strip()


def get_neighbor_generic(typ, info_neighbor, search_if_index = -1, return_ignore = False):
	(if_all, lldpRemSysName, lldpLocPortDesc, cdpCacheDeviceId, neighbor_ignore, neighbor_search) = info_neighbor
	all_neighbor_if_search = {}
	all_neighbor_if_ignore = {}

	if typ == "LLDP":
		cdp_lldp = lldpRemSysName
		cisco_lldp_index = get_cisco_lldp_index(if_all, lldpLocPortDesc)
	if	typ == "CDP":
		cdp_lldp = cdpCacheDeviceId

	


	if len(cdp_lldp) > 0:
		for neighbor_if in cdp_lldp:
			if neighbor_if == None:
				continue


			if typ == "LLDP":
				name     = neighbor_if[2] #lldpRemPortDesc
				port     = neighbor_if[1] #lldpRemSysName
				platform = neighbor_if[3] #lldpRemSysDesc

				if_index = neighbor_if[0].split(".")[1]

				if search_if_index > 0 and if_index in cisco_lldp_index.keys():
					new_cisco_lldp_index = cisco_lldp_index[if_index]
					if search_if_index != new_cisco_lldp_index:
						continue
					

			elif typ == "CDP":
				name     = neighbor_if[1] #cdpCacheDeviceId
				name     = name.split("(")[0]		# Cisco Nexus
				port     = neighbor_if[2] #cdpCacheDevicePort
				platform = neighbor_if[3] #cdpCachePlatform

				if_index = neighbor_if[0].split(".")[0]

				if search_if_index > 0 and search_if_index != if_index:
					continue


			if "cisco AIR-CAP" in platform:
				name = "AP__" + name
				port = "IGNORE"

			
			if len(neighbor_search) != 0:
				if not (list_find(platform,neighbor_search) and not list_find(platform,neighbor_ignore)):
					all_neighbor_if = all_neighbor_if_ignore
				else:
					all_neighbor_if = all_neighbor_if_search
			else:
				if list_find(platform,neighbor_ignore):
					all_neighbor_if = all_neighbor_if_ignore
				else:
					all_neighbor_if = all_neighbor_if_search

			name	 = name.encode('ascii','ignore').strip()
			port	 = port.encode('ascii','ignore').strip()
			platform = platform.encode('ascii','ignore').strip()
			

			name_printable = ''.join([c for c in name if ord(c) > 31 or ord(c) == 9])
			if len(name_printable) != len(name) or len(name_printable) == 0:
						continue


			new_neighbor_if = (typ, name, port, platform)
			if if_index in all_neighbor_if.keys():
				if typ == "LLDP" and if_index in cisco_lldp_index.keys():
					new_cisco_lldp_index = cisco_lldp_index[if_index]
					all_neighbor_if[new_cisco_lldp_index].append(new_neighbor_if)
				else:
					all_neighbor_if[if_index].append(new_neighbor_if)
			else:
				 if typ == "LLDP" and if_index in cisco_lldp_index.keys():
                                        new_cisco_lldp_index = cisco_lldp_index[if_index]
                                        all_neighbor_if[new_cisco_lldp_index] = [new_neighbor_if]
				 else:
					all_neighbor_if[if_index] = [new_neighbor_if]
							
	if return_ignore:
		return (all_neighbor_if_search, all_neighbor_if_ignore)
		
	return all_neighbor_if_search


def get_cisco_lldp_index(if_all, lldpLocPortDesc):
	new_cisco_lldp_index = {}
                       
       
       	for lldpLocPortDesc_interface in lldpLocPortDesc:
        	if lldpLocPortDesc_interface == None:
               		continue
             	else:
            		(lldpLocPortDesc_index, lldpLocPortDesc_desc) = lldpLocPortDesc_interface


           	for interface in if_all:
                       	if interface == None:
                               	continue
             		if_all_index = interface[0]
                     	if_all_desc      = replace_if64_trunk_ifdescr(interface[1])


               		if lldpLocPortDesc_desc == if_all_desc and lldpLocPortDesc_index != if_all_index:
                                	new_cisco_lldp_index[lldpLocPortDesc_index] = if_all_index

	return new_cisco_lldp_index


def get_neighbor_interface_raw(if_index, neighbor_lldp, neighbor_cdp):

	if_cdp = []
	if if_index in neighbor_cdp.keys():
		for neighbor in neighbor_cdp[if_index]:
			if_cdp.append(neighbor)

	if_lldp = []
	
	if if_index in neighbor_lldp.keys():
		for neighbor in neighbor_lldp[if_index]:
			if_lldp.append(neighbor)


	all_neighbor = if_cdp
	for lldp_typ, lldp_name, lldp_port, lldp_platform in if_lldp:
		found = False
		for all_typ, all_name, all_port, all_platform in all_neighbor:
				if all_name == lldp_name and all_port == lldp_port:
						found = True

		if not found:
				all_neighbor.append( (lldp_typ, lldp_name, lldp_port, lldp_platform) )


	return all_neighbor



def get_neighbor_interface_string(if_index, neighbor_lldp, neighbor_cdp, exclude_type = False, include_platform = False, prefix_typ = ""):
	
	all_neighbor = get_neighbor_interface_raw(if_index, neighbor_lldp, neighbor_cdp)

	neighbor_string = []
	for neighbor in sorted(all_neighbor):
		(typ, name, port, platform) = neighbor
		if prefix_typ != "":
			typ = prefix_typ + typ


		if exclude_type:
				neighbor_string.append("%s...%s" % (name, port) )
		elif include_platform:
				neighbor_string.append( "%s: %s...%s (%s)" % (typ, name, port, platform) )
		else:
				neighbor_string.append( "%s: %s...%s" % (typ, name, port) )


	if exclude_type and len(neighbor_string) == 0:
			return None
	else:
			return	" - ".join(neighbor_string)


def get_neighbor_ifAlias(interface, neighbor_lldp, neighbor_cdp, neighbor_lldp_ignore={}, neighbor_cdp_ignore={}):
	if_alias = interface[18]
	new_if_alias = if_alias
	if_index = interface[0]
	ifAlias_raw_neighbor = None
	neighbor_found = False

	neighbor_info_all = []


	neighbor = get_neighbor_interface_string(if_index, neighbor_lldp, neighbor_cdp)
	neighbor_ignore = get_neighbor_interface_string(if_index, neighbor_lldp_ignore, neighbor_cdp_ignore, prefix_typ="IGNORE-")

	
	neighbor +=  neighbor_ignore

	if len(neighbor) > 0:
		if if_alias != "":
				new_if_alias =	"%s -- ifAlias: %s" % (neighbor, if_alias)
		else:
				new_if_alias =	"%s -- ifAlias: NO_ALIAS" % (neighbor,) 

	else: 
		ifType_ethernet = ["6", "62", "117"]

		if list_find(interface[2], ifType_ethernet):
				new_if_alias =	"ifAlias: " + if_alias + " -- NO_CDP-LLDP"
		else:
				new_if_alias =	"ifAlias: " + if_alias



	return new_if_alias

def inventory_if64_params_neighbor(if_info, info_neighbor):
	(if_all, lldpRemSysName, lldpLocPortDesc, cdpCacheDeviceId, neighbor_ignore, neighbor_search) = info_neighbor

	neighbor_lldp = get_neighbor_generic("LLDP", info_neighbor)
	neighbor_cdp  = get_neighbor_generic("CDP",	 info_neighbor)

	item_params = inventory_if64_original(if_info)


	neighbor_map = {}
	for interface in if_info:
		if interface == None:
				continue
		if_descr = interface[2]
		if_index = interface[1]
		neighbor_map[if_descr] =  get_neighbor_interface_string(if_index, neighbor_lldp, neighbor_cdp, exclude_type=True)

	new_item_parmas = []
	for (item, params) in item_params:
		params = eval(params)



		neighbor = {"neighbor": None}
		for ifDescr in neighbor_map.keys():
			if ifDescr == item:
				if item in neighbor_map.keys():
					neighbor = {"neighbor": neighbor_map[ifDescr]}
					break

		params.update(neighbor)
		new_item_parmas.append( (item, params) )


	return new_item_parmas



def check_if64_neighbor_interface(interface, info_neighbor, params, item, dot3StatsDuplexStatus=[]):
	(if_all,lldpRemSysName, lldpLocPortDesc, cdpCacheDeviceId, neighbor_ignore, neighbor_search) = info_neighbor

	warn = 1
	return_state = 4
	output = None

	if_index = interface[0]

	(neighbor_lldp, neighbor_lldp_ignore) = get_neighbor_generic("LLDP", info_neighbor, if_index, return_ignore=True)
	(neighbor_cdp,  neighbor_cdp_ignore ) = get_neighbor_generic("CDP",  info_neighbor, if_index, return_ignore=True)


	interface[18] = get_neighbor_ifAlias(interface, neighbor_lldp, neighbor_cdp, neighbor_lldp_ignore, neighbor_cdp_ignore)



	if len(dot3StatsDuplexStatus) != 0:
			if_duplex_status = check_duplex(if_index, dot3StatsDuplexStatus)
			if if_duplex_status == "halfDuplex":
				interface[18] = "DuplexStats: halfDuplex (!)-- " + interface[18]

	
	old_neighbor = str(params.get("neighbor", "NO_NEIGHBOR_SAVED"))
	current_neighbor = str(get_neighbor_interface_string(interface[0], neighbor_lldp, neighbor_cdp, exclude_type=True))
	
	#print "o", old_neighbor
	#print "c", current_neighbor

	if old_neighbor !=	current_neighbor:
		interface[18] = "NEIGHBOR_CHANGED: old_neighbor: " + old_neighbor +	 " -------------- " + interface[18]

		output = check_if64_original(item, params, [[None] + interface])

		if output[0] < 1:
				output = (warn,) + output[1:]
		elif output[0] == 2 and output[1].find("(down)(!!)") != -1:
				output = (output[0], output[1].replace("NEIGHBOR_CHANGED:", "INTERFACE DOWN:") )

	elif interface[18].find("IP Phone") != -1:
		interface[18] = interface[18].replace("IP Phone","IP Phone(!) --Bitte Port als Access-Port konfigurieren!-- ")

		output = check_if64_original(item, params, [[None] + interface])
		if output[0] < 1:
				output = (warn,) + output[1:]
	elif interface[18].find("DuplexStats:") != -1:
		output = check_if64_original(item, params, [[None] + interface])
		if output[0] < 1:
				output = (warn,) + output[1:]
	else:
		output = check_if64_original(item, params, [[None] + interface])


	return output

#################################################################################################################
# Duplex
#################################################################################################################

oid_dot3StatsDuplexStatus       = (".1.3.6.1.2.1.10.7.2.1",             [OID_END, "19"]) 


def check_duplex(if_index, dot3StatsDuplexStatus):

	dot3StatsDuplexStatus_decode ={
		"1": "unknown",
		"2": "halfDuplex",
		"3": "fullDuplex"}

	if_duplex_status = "NO_Status"

	for if_duplex in dot3StatsDuplexStatus:
		if if_duplex == None:
			continue
		if if_index == if_duplex[0]:
			if_duplex_status = dot3StatsDuplexStatus_decode[if_duplex[1]]

	return if_duplex_status
			


#################################################################################################################
# VLAN
#################################################################################################################

oid_vmVoiceVlanId =             (".1.3.6.1.4.1.9.9.68.1.5.1.1", [OID_END, "1"])   #Cisco: vmVoiceVlanId
oid_vtpVlanName =               (".1.3.6.1.4.1.9.9.46.1.3.1.1", [OID_END, "4.1"])   #Cisco: vtpVlanName
oid_dot1qVlanStaticName =       (".1.3.6.1.2.1.17.7.1.4.3.1",   [OID_END, "1"])   #HP: dot1qVlanStaticName
oid_vlanTrunkPortVlansEnabled = (".1.3.6.1.4.1.9.9.46.1.6.1.1", [OID_END, "4" ])   #cisco: vlanTrunkPortVlansEnabled


def get_vlan_trunk_cisco(vlanTrunkPortVlansEnabled):
        allowed_vlan_trunk_dict = {}

        for oid, vlan_hex_list in vlanTrunkPortVlansEnabled:
                bin_string = convert_vlan_hex2bin(vlan_hex_list)

                vlan1_1024 = "0" + 1023 * "1"
                if bin_string ==  vlan1_1024:
                        allowed_vlan_trunk_dict[oid] = "1-1024"
                else:
                        allowed_vlan_trunk_dict[oid] = ", ".join(convert_vlan_bin2list(bin_string))


        return allowed_vlan_trunk_dict

def get_vlan_trunk_hp(dot1qVlanCurrentEntry_index_dict):
        allowed_vlan_trunk_dict = {}

        for if_index in dot1qVlanCurrentEntry_index_dict:
                if len(dot1qVlanCurrentEntry_index_dict[if_index]['tagged']) > 1:
                        allowed_vlan_trunk_dict[if_index] = ", ".join(dot1qVlanCurrentEntry_index_dict[if_index]['tagged'])
        return allowed_vlan_trunk_dict

def get_vlan(if_index, vmMembershipTable_dict, vtpVlanName, dot1qVlanStaticName, dot1qVlanCurrentEntry_index_dict):
        if_vlan_cisco = ""
        if_vlan_hp    = ""


        # Cisco vlanid
        if_vlan_info = vmMembershipTable_dict.get(if_index,"UNKNOWN")
        if if_vlan_info == "UNKNOWN":
                if_vlan_cisco = ""
        else:
                if_vlan_cisco = vmMembershipTable_dict[if_index].get("vmVlan")

        # Cisco vlanName
        if if_vlan_cisco != "":
                for vlanid, vlanname in vtpVlanName:
                        if vlanid == if_vlan_cisco:
                                if_vlan_cisco = "%s (%s)" % (if_vlan_cisco, vlanname)

#        # HP vlanid
#        for index, vlan in dot1qPortVlanEntry:
#                if index == if_index:
#                        if_vlan_hp = vlan

        # HP VlanID
        if if_index in dot1qVlanCurrentEntry_index_dict:
                if_vlan_hp += ", ".join(dot1qVlanCurrentEntry_index_dict[if_index]['untagged'])

        # HP vlanName
        if if_vlan_hp != "":
                for vlanid, vlanname in dot1qVlanStaticName:
                        if vlanid == if_vlan_hp:
                                if_vlan_hp = "%s (%s)" % (if_vlan_hp, vlanname)



        if if_vlan_cisco == "" and if_vlan_hp == "":
                return ""
        if if_vlan_cisco == "" and if_vlan_hp != "":
                return  if_vlan_hp
        if if_vlan_cisco != "" and if_vlan_hp != "":
                return if_vlan_cisco + " - " + if_vlan_hp
        elif if_vlan_cisco != "" and if_vlan_hp == "":
                return if_vlan_cisco
        else:
                return if_vlan_hp

def get_vlanvoice(if_index, vmVoiceVlanId, vtpVlanName, dot1qVlanStaticName, dot1qVlanCurrentEntry_index_dict):
        if_vlan_cisco = ""
        if_vlan_hp    = ""


        # Cisco vlanid
        for index, vlan in vmVoiceVlanId:
                if index == if_index:
                        if vlan == "4096":
                                # http://tools.cisco.com/Support/SNMP/do/BrowseOID.do?local=en&translate=Translate&objectInput=1.3.6.1.4.1.9.9.68.1.5.1.1.1
                                if_vlan_cisco = ""
                        else:
                                if_vlan_cisco = vlan

        # Cisco vlanName
        if if_vlan_cisco != "":
                for vlanid, vlanname in vtpVlanName:
                        if vlanid == if_vlan_cisco:
                                if_vlan_cisco = "%s (%s)" % (if_vlan_cisco, vlanname)

        # HP VlanID
        if if_index in dot1qVlanCurrentEntry_index_dict:
                if len(dot1qVlanCurrentEntry_index_dict[if_index]['tagged']) <= 1:
                        if_vlan_hp = ", ".join(dot1qVlanCurrentEntry_index_dict[if_index]['tagged'])



        # HP vlanName
        if if_vlan_hp != "":
                for vlanid, vlanname in dot1qVlanStaticName:
                        if vlanid == if_vlan_hp:
                                if_vlan_hp = "%s (%s)" % (if_vlan_hp, vlanname)

        if if_vlan_cisco != "":
                return if_vlan_cisco
        else:
                return if_vlan_hp
