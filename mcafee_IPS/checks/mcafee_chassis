#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_mcafee_chassis(info):
        if len(info[0][0]) == 5:
                return [ (None, None) ]
        return []

def check_mcafee_chassis(item, params, info):
        (temperatureStatus, fanStatus, primaryPowerSupplyStatus, secondaryPowerSupplyStatus, ivSysHealth) = info[0][0]
        temperatureStatus_map = {"0":"normal", "1":"abnormal"}
        fanStatus_map = {"0":"normal", "1":"abnormal","2":"removed"}
        PowerSupplyStatus_map = {"0":"not-present", "1":"present-operational","2":"present-nonoperational"}
        ivSysHealth_map = {"0":"bad", "1":"good","2":"uninitialized"}

        warn = 0
        msg = []

        msg_temp = "SysHealth: " + ivSysHealth_map[ivSysHealth] 
        if saveint(ivSysHealth) != 1:
                warn = 1
                msg_temp += "(!)"
        msg.append( msg_temp )

        msg_temp = "temperature: " + temperatureStatus_map[temperatureStatus] 
        if saveint(temperatureStatus) != 0: 
                warn = 1
                msg_temp += "(!)"
        msg.append( msg_temp )

        msg_temp = "fan: " + fanStatus_map[fanStatus] 
        if saveint(fanStatus) != 0: 
                warn = 1
                msg_temp += "(!)"
        msg.append( msg_temp )


        msg_temp = "primaryPowerSupply: " + PowerSupplyStatus_map[primaryPowerSupplyStatus]
        if  saveint(primaryPowerSupplyStatus) != 1:               
                warn = 1
                msg_temp += "(!)"
        msg.append( msg_temp )

        msg_temp = "secondaryPowerSupply: " + PowerSupplyStatus_map[secondaryPowerSupplyStatus] 
        if  saveint(secondaryPowerSupplyStatus) != 1:        
                warn = 1
                msg_temp += "(!)"
        msg.append( msg_temp )

        if warn > 0:
                return 1, " - ".join(msg)  
        return 0, " - ".join(msg)





check_info["mcafee_chassis"] = {
    'check_function':          check_mcafee_chassis,
    'inventory_function':      inventory_mcafee_chassis,
    'service_description':     'Chassis_Status',
    'has_perfdata':            True,
    'snmp_info':               [( ".1.3.6.1.4.1.8962.2.1.2.1", ["7.1","7.2","7.3","7.4","1.13"]),     # chassisGrp        
    ],
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.4.1.8962.2.1.2.1.1.6.0") == "MCAFEE-NETWORK-SECURITY-PLATFORM",
}
