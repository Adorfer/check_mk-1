#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Author: Christian Burmeister


def inv_switch_ipaddr(info, params):

    port_info, ipAdEntAddr, ipAdEntNetMask = info
   
    ipAddress_dict = get_ip_address_raw(ipAdEntAddr, ipAdEntNetMask)

    addresses = inv_tree("networking.switch_addresses:")
    for if_index, if_descr, if_alias, if_type  in port_info:
            if if_index in ipAddress_dict.keys():
                ipaddr = "; ".join(ipAddress_dict[if_index]) 
                addresses.append({
                        "index"         : if_index,        
                        "description"   : if_descr,
                        "alias"         : if_alias,
                        "address"       : ipaddr, 
                })


inv_info['switch_ipaddr'] = {
    "inv_function" : inv_switch_ipaddr,
    'includes':  [ 'if_network.include' ],
    'snmp_info': [
        ( ".1.3.6.1.2.1", [
           "2.2.1.1",            # ifIndex
           "2.2.1.2",            # ifDescr
           "31.1.1.1.18",        # ifAlias
           "2.2.1.3",            # ifType
        ]),
        oid_ipAdEntAddr,
        oid_ipAdEntNetMask,
    ],
    'snmp_scan_function': lambda oid: int(oid(".1.3.6.1.2.1.2.1.0")) >= 2,
}
