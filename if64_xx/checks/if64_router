#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Christian Burmeister

#--------------------------------------------------------------------------------------------

# Debug: cmk -vn --debug --checks if64_router -II Router



def get_ifSpeed(interface, ifSpeed_list):

        ifIndex = interface[0]
        ifHighSpeed = interface[3]

        ifSpeed = None
        for interface in ifSpeed_list:
                if interface == None: continue
                if str(interface[0]) == str(ifIndex):
                        ifSpeed = saveint(interface[1])


        ninty_nine_mbits = 99
        if saveint(ifHighSpeed) > ninty_nine_mbits:
                return saveint(ifHighSpeed) * 1000000
        else:
                return ifSpeed


def parse_if64_router(info):

        if_all, ipAdEntAddr, ipAdEntNetMask, ifSpeed_list = info
        ipAddress_dict = get_ip_address_raw(ipAdEntAddr, ipAdEntNetMask)

        parsed = (if_all, ipAddress_dict, ifSpeed_list)

        return parsed


def  check_if64_router(item, params, parsed):
    info_tmp = []

    (if_all, ipAddress_dict, ifSpeed_list) = parsed


    for interface in if_all:
        if interface == None: continue
        if interface[1] == item:
                ips = ipAddress_dict.get(interface[0],[])


                interface[3] = get_ifSpeed(interface, ifSpeed_list)

                if len(ips) > 0:

                        wan_cross_ips = ["10.x."]
                        lan_ips       = ["10.x.", "10.x.", "10.x.", "10.x."]
                        voip_ips      = ["172.x", "172.x", "172.x"]



                        desc = "UNKOWN-IP: "
                        if list_find(ips[0], wan_cross_ips):
                                desc = "WAN: "
                        if list_find(ips[0], voip_ips):
                                desc = "VoIP: "
                        if list_find(ips[0], lan_ips):
                                desc = "LAN: "

                        if len(interface[18]) > 0:
                                interface[18] =  desc + str(ips) + " -- ifAlias: " + interface[18]
                        else:
                                interface[18] =  desc + str(ips)


                info_tmp.append([None] + interface)


    # change crit traffic value, when set to 101%
    if "traffic" in  params.keys():
        if 101.0 == params.get("traffic")[1]:
                   (warn, crit) = params.get("traffic")
                   crit = 150.0
                   params["traffic"] = (warn, crit)


    return check_if64_original_speed32(item, params, info_tmp)

def inventory_if64_router(parsed):

    interface_wan_index = []
    interface_lan_index = []

    (if_all, ipAddress_dict, ifSpeed_list) = parsed


    for if_index in ipAddress_dict:
        if "10.x." in ipAddress_dict[if_index]:
                interface_wan_index.append(if_index)
        if not ("10.x." in ipAddress_dict[if_index] or "10.x." in ipAddress_dict[if_index]):
                interface_lan_index.append(if_index)



    info_temp = []
    for interface in if_all:
        if interface == None:
                continue

        interface[3] = get_ifSpeed(interface, ifSpeed_list)

        if interface[0] in interface_wan_index:
                if interface[3] != "100000000" and interface[3] != "1000000000" and interface[18].find("Crosslink") == -1:
                        info_temp.append([None] + interface)
        if interface[0] in interface_lan_index:
                if not interface[1].startswith("Loopback") and interface[18].find("Crosslink") == -1:
                        info_temp.append([None] + interface)
#       if interface[2] in ["6", "62", "117"] and interface[4] == "1" and not interface[1].startswith("Backplane-") and not interface[1].startswith("Vlan"):
#               print interface[1], interface[2], interface[4], interface[18]
#               info_temp.append([None] + interface)




    return inventory_if64_original(info_temp)




check_info["if64_router"] = {
#    'parse_function'            : parse_if64,
    'check_function'            : check_if64_router,
    'inventory_function'        : inventory_if64_router,
    'parse_function'            : parse_if64_router,
    'service_description'       : 'If_Router %s',
    'has_perfdata'              : True,
    'includes'                  : [ 'if.include', 'if64.include', 'if_network.include' ],
    'snmp_info'                 : [( ".1.3.6.1.2.1", if64_snmp_end_oids),
                                   oid_ipAdEntAddr,
                                   oid_ipAdEntNetMask,
                                   (".1.3.6.1.2.1.2.2.1", [OID_END,"5"]),#ifSpeed
                                  ],
    'snmp_scan_function'        : lambda oid: if64_scan_function(oid, False),
    'group'                     : 'if',
#    'node_info'                 : True,
    'default_levels_variable'   : 'if_default_levels',
}
