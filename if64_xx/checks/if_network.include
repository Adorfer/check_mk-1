#!/usr/bin/python

# Author: Christian Burmeister

"""
#################################################################################################################
# fuer CMK 1.2.6

def fix_if64_highspeed(info):
        for line in info:
                if type(line[4]) == str: # not yet converted
                        line[4] = saveint(line[4]) * 1000000


def inventory_if64_original(info):
        # Fix for switches like DLINK, with empty lines in MIB
        info = [ x for x in info if saveint(x[1]) > 0 ]
        fix_if64_highspeed(info)
        return inventory_if_common(info, has_nodeinfo = True)

def check_if64_original(item, params, info):
        fix_if64_highspeed(info)
        return check_if_common(item, params, info, has_nodeinfo = True)

def if64_scan_function_original(oid):
        ignored_strings = [
        "LANCOM",
        "Brocade VDX Switch",
        ]
        for string in ignored_strings:
                if string in oid(".1.3.6.1.2.1.1.1.0"):
                        return False

        if ".4.1.11863." in oid(".1.3.6.1.2.1.1.2.0"):
                return False

        if if64_disabled(g_hostname):
                return False

        if oid(".1.3.6.1.2.1.31.1.1.1.6.*") != None:
                return True
        return False


if64_snmp_end_oids = [
    "2.2.1.1",     # ifIndex                   0
    "2.2.1.2",     # ifDescr                   1
    "2.2.1.3",     # ifType                    2
    "31.1.1.1.15", # ifHighSpeed               .. 1000 means 1Gbit
    "2.2.1.8",     # ifOperStatus              4
    "31.1.1.1.6",  # ifHCInOctets              5
    "31.1.1.1.7",  # ifHCInUcastPkts           6
    "31.1.1.1.8",  # ifHCInMulticastPkts       7
    "31.1.1.1.9",  # ifHCInBroadcastPkts       8
    "2.2.1.13",    # ifInDiscards              9
    "2.2.1.14",    # ifInErrors               10
    "31.1.1.1.10", # ifHCOutOctets            11
    "31.1.1.1.11", # ifHCOutUcastPkts         12
    "31.1.1.1.12", # ifHCOutMulticastPkts     13
    "31.1.1.1.13", # ifHCOutBroadcastPkts     14
    "2.2.1.19",    # ifOutDiscards            15
    "2.2.1.20",    # ifOutErrors              16
    "2.2.1.21",    # ifOutQLen                17
    "31.1.1.1.18", # ifAlias                  18
    "2.2.1.6",     # ifPhysAddress            19
]

#scan_funtion im Check
#    'snmp_scan_function'        : if64_scan_function

"""
#################################################################################################################
# fuer cmk 1.27

def inventory_if64_original_speed32(info):
        return inventory_if_common(info, has_nodeinfo = True)

def inventory_if64_original(info):
        info = parse_if64(info)
        return inventory_if_common(info, has_nodeinfo = True)

def check_if64_original(item, params, info):
        info = parse_if64(info)
        return check_if_common(item, params, info, has_nodeinfo = True)

def check_if64_original_speed32(item, params, info):
        return check_if_common(item, params, info, has_nodeinfo = True)

def if64_scan_function_orignial(oid):
        return if64_scan_function(oid, False)

#scan_funtion im Check
#        'snmp_scan_function'        : lambda oid: if64_scan_function(oid, False),

#################################################################################################################
# Einstellungen
#################################################################################################################

remove_domains_cisco_ap = [".test1.de",".test2.de"] 

#################################################################################################################
# Allgemein
#################################################################################################################

def list_find(item, list):
        found = False
        for i in list:
                if item.lower().find(i.lower()) != -1:
                        found = True
                        break

        return found


def is_string_printable(string):

        #import string
        #string_printable = string.printable
        string_printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
        name_isprintable = set(string).issubset(set(string_printable))
        return name_isprintable




#################################################################################################################
# Trunks
#################################################################################################################

oid_vlanTrunkPortDynamicStatus  = (".1.3.6.1.4.1.9.9.46.1.6.1.1", [OID_END, "14"])
oid_vmMembershipTable           = (".1.3.6.1.4.1.9.9.68.1.2.2.1", [OID_END, "1", "2", "3", "4", "5", "6", "7" ])
oid_dot1qVlanCurrentEntry       = (".1.3.6.1.2.1.17.7.1.4.2.1", [OID_END, "4", "5" ])

def get_port_type(if_index, index_trunk_cisco, index_nottrunk_cisco,  index_trunk_hp, index_nottrunk_hp, index_portchannel_cisco):

    if if_index in index_trunk_cisco:
        return "Trunk (Cisco)"
    elif if_index in index_portchannel_cisco:
        return "Member of PortChannel (Cisco)"
    elif if_index in index_nottrunk_cisco:
        return "Access (Cisco)"
    elif if_index in index_trunk_hp:
        return "Trunk (HP)"
    elif if_index in index_nottrunk_hp:
        return "Access (HP)"
    else:
        return ""

def get_vmMembershipTable(vmMembershipTable):

        vmVlanType_decode = {
                "1":"static",
                "2":"dynamic",
                "3":"multiVlan",
        }

        vmPortStatus_decode = {
                "1":"inactive",
                "2":"active",
                "3":"shutdown",
        }

        vmMembershipTable_dict = {}
        for interface_vlan in vmMembershipTable:
                (if_index, vmVlanType, vmVlan, vmPortStatus, vmVlans, vmVlans2k, vmVlans3k, vmVlans4k,) = interface_vlan

		if if_index == "":
			continue

                if if_index not in vmMembershipTable_dict.keys():
                        vmMembershipTable_dict[if_index] = {}

                vmMembershipTable_dict[if_index].update( {"vmVlanType":vmVlanType_decode[vmVlanType] } )
                vmMembershipTable_dict[if_index].update( {"vmVlan":vmVlan } )
                vmMembershipTable_dict[if_index].update( {"vmPortStatus":vmPortStatus_decode[vmPortStatus] } )

                if vmVlans != "":
                        bin_string   = convert_vlan_hex2bin(vmVlans)
                        bin_string2k = convert_vlan_hex2bin(vmVlans2k)
                        bin_string3k = convert_vlan_hex2bin(vmVlans3k)
                        bin_string4k = convert_vlan_hex2bin(vmVlans4k)


                        all_vmVlans = ", ".join( convert_vlan_bin2list(bin_string  , 1) + convert_vlan_bin2list(bin_string2k, 1024) +
                                        convert_vlan_bin2list(bin_string3k, 2048) + convert_vlan_bin2list(bin_string4k, 3096)
                        )



                        vmMembershipTable_dict[if_index].update( {"vmVlans":all_vmVlans })

        return vmMembershipTable_dict

def get_index_trunk_cisco(vlanTrunkPortDynamicStatus, vmMembershipTable_dict={}, return_access= False):
        index_trunk_cisco = []
        index_nottrunk_cisco = []

        # find Cisco Trunks
        if len(vlanTrunkPortDynamicStatus) > 0:
                for cisco_if in vlanTrunkPortDynamicStatus:
                        if cisco_if == None:
                                continue
                        is_trunking = '1'
                        is_notTrunking = '2'
                        if cisco_if[1] == is_trunking:
                                index_trunk_cisco.append(cisco_if[0])
                        elif cisco_if[1] == is_notTrunking:
                                index_nottrunk_cisco.append(cisco_if[0])


        # only for Cisco Nexus with Trunks on Fex
        vmVlanType_found = False
        for if_index in vmMembershipTable_dict.keys():
                if vmMembershipTable_dict[if_index]["vmVlanType"] == 'multiVlan':
                        if if_index not in index_trunk_cisco:
                                index_trunk_cisco.append(if_index)
                                vmVlanType_found = True

        if vmVlanType_found:
                for if_index in vmMembershipTable_dict.keys():
                        if vmMembershipTable_dict[if_index]["vmVlanType"] == 'static':
                                index_nottrunk_cisco.append(if_index)



        index_trunk_cisco = list(set(index_trunk_cisco))
        index_nottrunk_cisco = list(set(index_nottrunk_cisco))
        if return_access:
                return (index_trunk_cisco, index_nottrunk_cisco)
        else:
                return index_trunk_cisco


def convert_vlan_hex2bin(vlan_hex_list):
        # Beispiel hex_value = '\xff\xff\xf8\x00\x00\x00\x00\x00'
        hex_string =  "".join ([ "%02X" % ord( x ) for x in list(vlan_hex_list)])
        # Beispiel hex_string = FFFFF80000000000
        bin_string =  "".join(["{0:04b}".format(int(c,16)) for c in hex_string])
        # Beispiel bin_string = 1111111111111111111110000000000000000000000000000000000000000000

        return bin_string

def convert_vlan_bin2list(bin_string, offset = 0):
        vlan_list =[]
        for index in range(len(bin_string)):
                if bin_string[index] == "1":
                        vlan_list.append(str(offset + index))
        return vlan_list


def get_dot1qVlanCurrentEntry_index(dot1qVlanCurrentEntry):
        dot1qVlanCurrentEntry_dict ={}
        dot1qVlanCurrentEntry_index_dict = {}
        for oid in dot1qVlanCurrentEntry:
                if oid == None:
                        continue

                vlan = oid[0].replace("0.","")
                offset = 1
                dot1qVlanCurrentEgressPorts_list   = convert_vlan_bin2list(convert_vlan_hex2bin(oid[1]),offset)
                dot1qVlanCurrentUntaggedPorts_list = convert_vlan_bin2list(convert_vlan_hex2bin(oid[2]),offset)

                max_ports = len(convert_vlan_hex2bin(oid[2]))

                dot1qVlanCurrentEntry_dict[vlan] = {"dot1qVlanCurrentEgressPorts":dot1qVlanCurrentEgressPorts_list,
                                                    "dot1qVlanCurrentUntaggedPorts":dot1qVlanCurrentUntaggedPorts_list}


                all_ports = set(dot1qVlanCurrentEntry_dict[vlan]["dot1qVlanCurrentEgressPorts"] + dot1qVlanCurrentEntry_dict[vlan]["dot1qVlanCurrentUntaggedPorts"])

                for if_index in all_ports:
                        tagged   = False
                        untagged = False

                        if if_index in dot1qVlanCurrentEntry_dict[vlan]["dot1qVlanCurrentEgressPorts"]:
                                tagged = True
                        if if_index in dot1qVlanCurrentEntry_dict[vlan]["dot1qVlanCurrentUntaggedPorts"]:
                                untagged = True

                        if tagged or untagged:
                                if if_index not in dot1qVlanCurrentEntry_index_dict:
                                        dot1qVlanCurrentEntry_index_dict[if_index] = {}
                                        dot1qVlanCurrentEntry_index_dict[if_index]["untagged"] = []
                                        dot1qVlanCurrentEntry_index_dict[if_index]["tagged"]   = []
                                if untagged:
                                        dot1qVlanCurrentEntry_index_dict[if_index]["untagged"].append(vlan)
                                elif tagged:
                                        dot1qVlanCurrentEntry_index_dict[if_index]["tagged"].append(vlan)

        return dot1qVlanCurrentEntry_index_dict


def get_index_trunk_hp(dot1qVlanCurrentEntry, return_access = False):
        dot1qVlanCurrentEntry_index_dict = get_dot1qVlanCurrentEntry_index(dot1qVlanCurrentEntry)
        index_trunk_hp = []
        index_nottrunk_hp = []


        for if_index in dot1qVlanCurrentEntry_index_dict:
                if len(dot1qVlanCurrentEntry_index_dict[if_index]['tagged']) > 1:
                        index_trunk_hp.append(if_index)
                else:
                        index_nottrunk_hp.append(if_index)

        if return_access:
                return (index_trunk_hp, index_nottrunk_hp)
        else:
                return index_trunk_hp




#################################################################################################################
# IP-Adressen
#################################################################################################################

oid_ipAdEntAddr                 = (".1.3.6.1.2.1.4.20.1",               ["2", OID_END])
oid_ipAdEntNetMask              = (".1.3.6.1.2.1.4.20.1",               [OID_END, "3"])

def get_ip_address_raw(ipAdEntAddr, ipAdEntNetMask):
        ipAdEntNetMask_dict = {}

        for value in ipAdEntNetMask:
                if value == None: continue
                (ip, mask) = value
                mask_cidr = sum([bin(int(x)).count('1') for x in mask.split('.')])
                ipAdEntNetMask_dict[ip] = (mask,  str(mask_cidr))

        ipAddress_dict = {}
        for ip in ipAdEntAddr:
                if ip == None: continue
                if_index = ip[0]
                if if_index not in ipAddress_dict.keys():
                                ipAddress_dict[if_index] = []
                ipAddress_dict[if_index].append(  str("%s/%s" % (ip[1], ipAdEntNetMask_dict[ip[1]][1]))  )

        return ipAddress_dict

#################################################################################################################
# Port channel
#################################################################################################################

oid_dot3adAggPortSelectedAggID  = (".1.2.840.10006.300.43.1.2.1.1",     [OID_END, "12"])

def get_index_portchannel_cisco(dot3adAggPortSelectedAggID):
        index_portchannel_cisco = []

        if len(dot3adAggPortSelectedAggID) > 0:
                for cisco_if in dot3adAggPortSelectedAggID:
                        if cisco_if == None:
                                continue
                        is_no_etherchannel = '0'
                        if cisco_if[1] > is_no_etherchannel:
                                index_portchannel_cisco.append(cisco_if[0])

        return index_portchannel_cisco



#################################################################################################################
# CDP/LLDP
#################################################################################################################

oid_lldpRemSysName              = (".1.0.8802.1.1.2.1.4.1.1",           [OID_END, "8", "9", "10" ])
oid_lldpRemManAddrOID           = (".1.0.8802.1.1.2.1.4.2.1",           [OID_END, "5" ])
oid_lldpLocPortDesc             = (".1.0.8802.1.1.2.1.3.7.1",           [OID_END, "4" ])
oid_cdpCacheDeviceId            = (".1.3.6.1.4.1.9.9.23.1.2.1.1",       [OID_END, "6", "7", "8" ])
oid_cdpCacheDeviceId_with_ip    = (".1.3.6.1.4.1.9.9.23.1.2.1.1",       [OID_END, "6", "7", "8", "4" ])

def replace_if64_trunk_ifdescr(ifDescr):
        return ifDescr.replace("If_Trunk ","").replace("If_CDP/LLDP ","").replace("If_Po ","").strip()

def decode_lldpRemManAddrOID(lldpRemManAddrOID):
        lldpRemManAddrOID_dict = {}

        for oid in lldpRemManAddrOID:
                oid_list = oid[0].split(".")
                if len(oid_list) == 9:
                        if_index = oid_list[1]
                        ip = ".".join(oid_list[5:])
                        lldpRemManAddrOID_dict[if_index] = ip

        return lldpRemManAddrOID_dict

def decode_cdpCacheAddress(cdpCacheAddress):
        ip_list = []
        for i in cdpCacheAddress:
                ip_list.append(str(ord(i)))

        if 4 != len(list(cdpCacheAddress)):
                ip_list.append("IP_ERROR")

        return ".".join(ip_list)

def parse_neighbor_info(info_neighbor):

        (neighbor_lldp, neighbor_lldp_ignore) = get_neighbor_parse("LLDP", info_neighbor)
        (neighbor_cdp, neighbor_cdp_ignore)   = get_neighbor_parse("CDP",  info_neighbor)

        info_neighbor_parsed = (neighbor_lldp, neighbor_lldp_ignore, neighbor_cdp, neighbor_cdp_ignore)

        return info_neighbor_parsed


def get_neighbor_parse(typ, info_neighbor, lldpRemManAddrOID=[]):
        (if_all, lldpRemSysName, lldpLocPortDesc, cdpCacheDeviceId, neighbor_ignore, neighbor_search) = info_neighbor

        all_neighbor_if_search = {}
        all_neighbor_if_ignore = {}


        lldpRemManAddrOID_dict = decode_lldpRemManAddrOID(lldpRemManAddrOID)

        if typ == "LLDP":
                cdp_lldp = lldpRemSysName
                index_cisco_lldp = get_index_cisco_lldp(if_all, lldpLocPortDesc)
        if typ == "CDP":
                cdp_lldp = cdpCacheDeviceId


        if len(cdp_lldp) > 0:
                for neighbor_if in cdp_lldp:
                        if neighbor_if == None:
                                continue

			if neighbor_if[0] == "":
				continue

                        if typ == "LLDP":
                                if_index = neighbor_if[0].split(".")[1]
                                if_index_lldp_cisco = index_cisco_lldp.get(if_index, None)

                                if if_index_lldp_cisco != None:
                                        if_index = if_index_lldp_cisco


                                name     = neighbor_if[2] #lldpRemPortDesc
                                port     = neighbor_if[1] #lldpRemSysName
                                platform = neighbor_if[3] #lldpRemSysDesc

                                if if_index in lldpRemManAddrOID_dict:
                                        ip = lldpRemManAddrOID_dict[if_index]
                                else:
                                        ip = None




                        elif typ == "CDP":
                                if_index = neighbor_if[0].split(".")[0]

                                name     = neighbor_if[1] #cdpCacheDeviceId
                                name     = name.split("(")[0]           # Cisco Nexus
                                port     = neighbor_if[2] #cdpCacheDevicePort
                                platform = neighbor_if[3] #cdpCachePlatform

                                if 4 < len(neighbor_if):
                                        ip = decode_cdpCacheAddress(neighbor_if[4])
                                else:
                                        ip = None

                        #if search_if_index > 0 and search_if_index != if_index:
                        #        continue

                        if not is_string_printable(name):
                                continue

                        if "not advertised" in name or len(name) == 0:
                                continue

                        (name, port) = workaround_cisco_ap_wlan(platform, typ, name, port)


                        new_neighbor_if = (typ, name, port, platform, ip)


                        if ignore_neighbor(platform, neighbor_search, neighbor_ignore):
                                if if_index not in all_neighbor_if_ignore.keys():
                                        all_neighbor_if_ignore[if_index] = []

                                all_neighbor_if_ignore[if_index].append(new_neighbor_if)
                        else:
                                if if_index not in all_neighbor_if_search.keys():
                                        all_neighbor_if_search[if_index] = []

                                all_neighbor_if_search[if_index].append(new_neighbor_if)

        return (all_neighbor_if_search, all_neighbor_if_ignore)



def workaround_cisco_ap_wlan(platform, typ, name, port):
        if ("cisco AIR-CAP" in platform and typ == "CDP") or ("AP3G1-K9W8-M" in platform and typ == "LLDP"):

                for domain in remove_domains_cisco_ap:
                        name = name.replace(domain,"")

                name = "AP__" + name
                port = "IGNORE"

        return (name, port)


def ignore_neighbor(platform, neighbor_search, neighbor_ignore):

        if len(neighbor_search) != 0:
                if not (list_find(platform,neighbor_search) and not list_find(platform,neighbor_ignore)):
                        return True
                else:
                        return False
        else:
                if list_find(platform,neighbor_ignore):
                        return True
                else:
                        return False


def get_index_cisco_lldp(if_all, lldpLocPortDesc):
        new_cisco_lldp_index = {}

        lldpLocPortDesc_dict = {}
        for lldpLocPortDesc_interface in lldpLocPortDesc:
                if lldpLocPortDesc_interface == None:
                        continue

                (index, desc) = lldpLocPortDesc_interface
                lldpLocPortDesc_dict.update( {desc:index} )


        for interface in if_all:
                if interface == None:
                        continue
                if_all_index = interface[0]
                if_all_desc  = replace_if64_trunk_ifdescr(interface[1])

                if if_all_desc in lldpLocPortDesc_dict:
                        lldpLocPortDesc_index = lldpLocPortDesc_dict[if_all_desc]

                        if lldpLocPortDesc_index != if_all_index:
                                new_cisco_lldp_index[lldpLocPortDesc_index] = if_all_index

        return new_cisco_lldp_index




def get_neighbor_interface_raw(if_index, neighbor_lldp, neighbor_cdp):

        if_cdp = []
        if if_index in neighbor_cdp.keys():
                for neighbor in neighbor_cdp[if_index]:
                        if_cdp.append(neighbor)

        if_lldp = []

        if if_index in neighbor_lldp.keys():
                for neighbor in neighbor_lldp[if_index]:
                        if_lldp.append(neighbor)


        all_neighbor = if_cdp
        for lldp_typ, lldp_name, lldp_port, lldp_platform, ip in if_lldp:
                found = False
                for all_typ, all_name, all_port, all_platform, ip in all_neighbor:
                                if all_name == lldp_name and all_port == lldp_port:
                                                found = True

                if not found:
                                all_neighbor.append( (lldp_typ, lldp_name, lldp_port, lldp_platform, ip) )


        return all_neighbor



def get_neighbor_interface_string(if_index, neighbor_lldp, neighbor_cdp, exclude_type = False, include_platform = False, prefix_typ = "", with_ip=False):

        all_neighbor = get_neighbor_interface_raw(if_index, neighbor_lldp, neighbor_cdp)

        neighbor_string = []
        for neighbor in sorted(all_neighbor):
                (typ, name, port, platform, ip) = neighbor
                if prefix_typ != "":
                        typ = prefix_typ + typ


                if exclude_type:
                        neighbor_string.append("%s...%s" % (name, port) )
                elif include_platform and with_ip:
                        if ip != None:
                                neighbor_string.append( "%s: %s...%s [%s](%s)" % (typ, name, port, ip, platform) )
                        else:
                                neighbor_string.append( "%s: %s...%s (%s)" % (typ, name, port, platform) )
                elif include_platform:
                        neighbor_string.append( "%s: %s...%s (%s)" % (typ, name, port, platform) )
                else:
                        neighbor_string.append( "%s: %s...%s" % (typ, name, port) )


        if exclude_type and len(neighbor_string) == 0:
                        return None
        else:
                        return  " - ".join(neighbor_string)


def get_neighbor_ifAlias(interface, neighbor_lldp, neighbor_cdp, neighbor_lldp_ignore={}, neighbor_cdp_ignore={}):
        if_alias = interface[18]
        new_if_alias = if_alias
        if_index = interface[0]
        ifAlias_raw_neighbor = None
        neighbor_found = False

        neighbor_info_all = []


        neighbor        = get_neighbor_interface_string(if_index, neighbor_lldp, neighbor_cdp)
        neighbor_ignore = get_neighbor_interface_string(if_index, neighbor_lldp_ignore, neighbor_cdp_ignore, prefix_typ="IGNORE-")

        neighbor_all = []
        if len(str(neighbor).strip()) > 0:
                neighbor_all.append( neighbor )

        if len(str(neighbor_ignore).strip()) > 0:
                neighbor_all.append( neighbor_ignore )



        if len(neighbor_all) > 0:
                if if_alias != "":
                                new_if_alias =  "%s -- ifAlias: %s" % (" - ".join(neighbor_all), if_alias)
                else:
                                new_if_alias =  "%s -- ifAlias: NO_ALIAS" % " - ".join(neighbor_all)

        else:
                ifType_ethernet = ["6", "62", "117"]

                if interface[2] in ifType_ethernet:
                                new_if_alias =  "ifAlias: " + if_alias + " -- NO_CDP-LLDP"
                else:
                                new_if_alias =  "ifAlias: " + if_alias


        return new_if_alias

def inventory_if64_params_neighbor(if_info, info_neighbor_parse ):
        (neighbor_lldp, neighbor_lldp_ignore, neighbor_cdp, neighbor_cdp_ignore) = info_neighbor_parse

        item_params = inventory_if64_original(if_info)


        neighbor_map = {}
        for interface in if_info:
                if interface == None:
                        continue
                if_descr = interface[2]
                if_index = interface[1]
                neighbor_map[if_descr] =  get_neighbor_interface_string(if_index, neighbor_lldp, neighbor_cdp, exclude_type=True)

        new_item_parmas = []
        for (item, params) in item_params:
                params = eval(params)



                neighbor = {"neighbor": None}
                for ifDescr in neighbor_map.keys():
                        if ifDescr == item:
                                if item in neighbor_map.keys():
                                        neighbor = {"neighbor": neighbor_map[ifDescr]}
                                        break

                params.update(neighbor)
                new_item_parmas.append( (item, params) )


        return new_item_parmas



def check_if64_neighbor_interface(interface, if_all, info_neighbor_parsed, params, item, dot3StatsDuplexStatus=[]):

        warn = 1
        return_state = 4
        output = None


        (neighbor_lldp, neighbor_lldp_ignore, neighbor_cdp, neighbor_cdp_ignore) = info_neighbor_parsed

        if_index = interface[0]

        neighbor_lldp_if        = {if_index : neighbor_lldp.get(if_index,[])}
        neighbor_lldp_if_ignore = {if_index : neighbor_lldp_ignore.get(if_index,[])}
        neighbor_cdp_if         = {if_index : neighbor_cdp.get(if_index,[])}
        neighbor_cdp_if_ignore  = {if_index : neighbor_cdp_ignore.get(if_index,[])}


        interface[18] = get_neighbor_ifAlias(interface, neighbor_lldp_if, neighbor_cdp_if, neighbor_lldp_if_ignore, neighbor_cdp_if_ignore)


        if len(dot3StatsDuplexStatus) != 0:
                        if_duplex_status = check_duplex(if_index, dot3StatsDuplexStatus)
                        if if_duplex_status == "halfDuplex":
                                interface[18] = "DuplexStats: halfDuplex (!)-- " + interface[18]


        old_neighbor = str(params.get("neighbor", "NO_NEIGHBOR_SAVED"))


        current_neighbor = str(get_neighbor_interface_string(interface[0], neighbor_lldp_if, neighbor_cdp_if, exclude_type=True))

        #print "o", old_neighbor
        #print "c", current_neighbor


        if old_neighbor !=      current_neighbor:
                interface[18] = "NEIGHBOR_CHANGED: old_neighbor: " + old_neighbor +      " -------------- " + interface[18]

                output = check_if64_original(item, params, [[None] + interface])

                if output[0] < 1:
                                output = (warn,) + output[1:]
                elif output[0] == 2 and output[1].find("(down)(!!)") != -1:
                                output = (output[0], output[1].replace("NEIGHBOR_CHANGED:", "INTERFACE DOWN:") )

        elif interface[18].find("IP Phone") != -1:
                interface[18] = interface[18].replace("IP Phone","IP Phone(!) --Bitte Port als Access-Port konfigurieren!-- ")

                output = check_if64_original(item, params, [[None] + interface])
                if output[0] < 1:
                                output = (warn,) + output[1:]
        elif interface[18].find("DuplexStats:") != -1:
                output = check_if64_original(item, params, [[None] + interface])
                if output[0] < 1:
                                output = (warn,) + output[1:]
        else:
                output = check_if64_original(item, params, [[None] + interface])



        return output

#################################################################################################################
# Duplex
#################################################################################################################

oid_dot3StatsDuplexStatus       = (".1.3.6.1.2.1.10.7.2.1",             [OID_END, "19"])


def check_duplex(if_index, dot3StatsDuplexStatus):

        dot3StatsDuplexStatus_decode ={
                "1": "unknown",
                "2": "halfDuplex",
                "3": "fullDuplex"}

        if_duplex_status = "NO_Status"

        for if_duplex in dot3StatsDuplexStatus:
                if if_duplex == None:
                        continue
                if if_index == if_duplex[0]:
                        if_duplex_status = dot3StatsDuplexStatus_decode[if_duplex[1]]

        return if_duplex_status



#################################################################################################################
# VLAN
#################################################################################################################

oid_vmVoiceVlanId =             (".1.3.6.1.4.1.9.9.68.1.5.1.1", [OID_END, "1"])   #Cisco: vmVoiceVlanId
oid_vtpVlanName =               (".1.3.6.1.4.1.9.9.46.1.3.1.1", [OID_END, "4.1"])   #Cisco: vtpVlanName
oid_dot1qVlanStaticName =       (".1.3.6.1.2.1.17.7.1.4.3.1",   [OID_END, "1"])   #HP: dot1qVlanStaticName
oid_vlanTrunkPortVlansEnabled = (".1.3.6.1.4.1.9.9.46.1.6.1.1", [OID_END, "4" ])   #cisco: vlanTrunkPortVlansEnabled


def get_vlan_trunk_cisco(vlanTrunkPortVlansEnabled):
        allowed_vlan_trunk_dict = {}

        for oid, vlan_hex_list in vlanTrunkPortVlansEnabled:
                bin_string = convert_vlan_hex2bin(vlan_hex_list)

                vlan1_1024 = "0" + 1023 * "1"
                if bin_string ==  vlan1_1024:
                        allowed_vlan_trunk_dict[oid] = "1-1024"
                else:
                        allowed_vlan_trunk_dict[oid] = ", ".join(convert_vlan_bin2list(bin_string))


        return allowed_vlan_trunk_dict

def get_vlan_trunk_hp(dot1qVlanCurrentEntry_index_dict):
        allowed_vlan_trunk_dict = {}

        for if_index in dot1qVlanCurrentEntry_index_dict:
                if len(dot1qVlanCurrentEntry_index_dict[if_index]['tagged']) > 1:
                        allowed_vlan_trunk_dict[if_index] = ", ".join(dot1qVlanCurrentEntry_index_dict[if_index]['tagged'])
        return allowed_vlan_trunk_dict

def get_vlan(if_index, vmMembershipTable_dict, vtpVlanName, dot1qVlanStaticName, dot1qVlanCurrentEntry_index_dict):
        if_vlan_cisco = ""
        if_vlan_hp    = ""


        # Cisco vlanid
        if_vlan_info = vmMembershipTable_dict.get(if_index,"UNKNOWN")
        if if_vlan_info == "UNKNOWN":
                if_vlan_cisco = ""
        else:
                if_vlan_cisco = vmMembershipTable_dict[if_index].get("vmVlan")

        # Cisco vlanName
        if if_vlan_cisco != "":
                for vlanid, vlanname in vtpVlanName:
                        if vlanid == if_vlan_cisco:
                                if_vlan_cisco = "%s (%s)" % (if_vlan_cisco, vlanname)

#        # HP vlanid
#        for index, vlan in dot1qPortVlanEntry:
#                if index == if_index:
#                        if_vlan_hp = vlan

        # HP VlanID
        if if_index in dot1qVlanCurrentEntry_index_dict:
                if_vlan_hp += ", ".join(dot1qVlanCurrentEntry_index_dict[if_index]['untagged'])

        # HP vlanName
        if if_vlan_hp != "":
                for vlanid, vlanname in dot1qVlanStaticName:
                        if vlanid == if_vlan_hp:
                                if_vlan_hp = "%s (%s)" % (if_vlan_hp, vlanname)



        if if_vlan_cisco == "" and if_vlan_hp == "":
                return ""
        if if_vlan_cisco == "" and if_vlan_hp != "":
                return  if_vlan_hp
        if if_vlan_cisco != "" and if_vlan_hp != "":
                return if_vlan_cisco + " - " + if_vlan_hp
        elif if_vlan_cisco != "" and if_vlan_hp == "":
                return if_vlan_cisco
        else:
                return if_vlan_hp

def get_vlanvoice(if_index, vmVoiceVlanId, vtpVlanName, dot1qVlanStaticName, dot1qVlanCurrentEntry_index_dict):
        if_vlan_cisco = ""
        if_vlan_hp    = ""


        # Cisco vlanid
        for index, vlan in vmVoiceVlanId:
                if index == if_index:
                        if vlan == "4096":
                                # http://tools.cisco.com/Support/SNMP/do/BrowseOID.do?local=en&translate=Translate&objectInput=1.3.6.1.4.1.9.9.68.1.5.1.1.1
                                if_vlan_cisco = ""
                        else:
                                if_vlan_cisco = vlan

        # Cisco vlanName
        if if_vlan_cisco != "":
                for vlanid, vlanname in vtpVlanName:
                        if vlanid == if_vlan_cisco:
                                if_vlan_cisco = "%s (%s)" % (if_vlan_cisco, vlanname)

        # HP VlanID
        if if_index in dot1qVlanCurrentEntry_index_dict:
                if len(dot1qVlanCurrentEntry_index_dict[if_index]['tagged']) <= 1:
                        if_vlan_hp = ", ".join(dot1qVlanCurrentEntry_index_dict[if_index]['tagged'])



        # HP vlanName
        if if_vlan_hp != "":
                for vlanid, vlanname in dot1qVlanStaticName:
                        if vlanid == if_vlan_hp:
                                if_vlan_hp = "%s (%s)" % (if_vlan_hp, vlanname)

        if if_vlan_cisco != "":
                return if_vlan_cisco
        else:
                return if_vlan_hp
