#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Christian Burmeister

neighbor_search = ["cisco ", "ProCurve ", "HP ", "Switch", "N7K", "N5K"]
neighbor_ignore = ["IP Phone", " ATA "]

def get_trunks(if_all, info_neighbor_parsed, info_trunk):

    (neighbor_lldp, neighbor_lldp_ignore, neighbor_cdp, neighbor_cdp_ignore) = info_neighbor_parsed
    (vlanTrunkPortDynamicStatus, dot3adAggPortSelectedAggID, dot1qVlanCurrentEntry) = info_trunk
  

    index_trunk_cisco = get_index_trunk_cisco(vlanTrunkPortDynamicStatus)
    index_portchannel_cisco = get_index_portchannel_cisco(dot3adAggPortSelectedAggID)
    index_trunk_hp    = get_index_trunk_hp(dot1qVlanCurrentEntry)

    index_neighbor = neighbor_lldp.keys() + neighbor_cdp.keys()

    # Ignore LLDP and CDP if interfaceType "propVirtual(53)"
    if len(index_neighbor) > 0:
        ignore_ifType = ['53']
        new_index_neighbor = []

        for interface in if_all:
                if interface == None: 
                        continue
                if interface[0] in index_neighbor:
                        if interface[2] not in ignore_ifType:
                                new_index_neighbor.append(interface[0])

        index_neighbor = new_index_neighbor

    # return Trunk Interfaces (hp or cisco) 
    if_trunks = [] 
    for interface in if_all:
        if interface == None:
                continue
        elif interface[0] in index_trunk_cisco + index_trunk_hp:
                interface[1] =  "If_Trunk " + interface[1]
                if_trunks.append([None] + interface) 
        elif interface[0] in index_portchannel_cisco:
                interface[1] =  "If_Po " + interface[1]
                if_trunks.append([None] + interface)
        elif interface[0] in index_neighbor:
                interface[1] =  "If_CDP/LLDP " + interface[1]
                if_trunks.append([None] + interface)

    return if_trunks

def parse_if64_trunk(info):

        if_all, vlanTrunkPortDynamicStatus, dot3adAggPortSelectedAggID, dot1qVlanCurrentEntry, \
        lldpRemSysName, lldpLocPortDesc, cdpCacheDeviceId, dot3StatsDuplexStatus = info

        info_neighbor = (if_all,lldpRemSysName, lldpLocPortDesc, cdpCacheDeviceId, neighbor_ignore, neighbor_search)
        info_trunk    = (vlanTrunkPortDynamicStatus, dot3adAggPortSelectedAggID, dot1qVlanCurrentEntry)
        info_duplex   = dot3StatsDuplexStatus

        info_neighbor_parsed = parse_neighbor_info(info_neighbor)

        parsed = (if_all, info_neighbor_parsed, info_trunk, info_duplex)

        return parsed



def inventory_if64_trunk(parsed):

    (if_all, info_neighbor_parsed, info_trunk, info_duplex) = parsed

    if_trunk = get_trunks(if_all, info_neighbor_parsed, info_trunk)

    return inventory_if64_params_neighbor(if_trunk, info_neighbor_parsed)


def check_if64_trunk(item, params, parsed):
    info_if64_check = []
    item = replace_if64_trunk_ifdescr(item)

    (if_all, info_neighbor_parsed, info_trunk, info_duplex) = parsed


    for interface in if_all:
        if interface == None:
                continue

        interface[1] = replace_if64_trunk_ifdescr(interface[1])
        info_if64_check.append([None] + interface)

        if interface[1] == item:
                return check_if64_neighbor_interface(interface, if_all, info_neighbor_parsed, params, item, info_duplex)

    return check_if64_original(item, params, info_if64_check)




check_info["if64_trunk"] = {
#    'parse_function'            : parse_if64,
    'check_function'            : check_if64_trunk,
    'inventory_function'        : inventory_if64_trunk,
    'parse_function'            : parse_if64_trunk,
    'service_description'       : "%s",
    'has_perfdata'              : True,
    'includes'                  : [ 'if.include', 'if64.include', 'if_network.include' ],
    'snmp_info'                 : [( ".1.3.6.1.2.1", if64_snmp_end_oids),
                                   oid_vlanTrunkPortDynamicStatus, 
                                   oid_dot3adAggPortSelectedAggID, 
                                   oid_dot1qVlanCurrentEntry,       
                                   oid_lldpRemSysName,
                                   oid_lldpLocPortDesc,            
                                   oid_cdpCacheDeviceId,           
                                   oid_dot3StatsDuplexStatus,      
                                  ],
    'snmp_scan_function'        : lambda oid: if64_scan_function(oid, False),
    'group'                     : 'if',
#    'node_info'                 : True,
    'default_levels_variable'   : 'if_default_levels',
}
