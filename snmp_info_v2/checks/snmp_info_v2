#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#standard_firmware_dict = {
#        "WS-C2950-"     :(True,  ["Version 12.1(22)EA14"]),
#        "WS-C2950C-"    :(True,  ["Version 12.1(22)EA14"]),
#        "WS-C2950G-"    :(True,  ["Version 12.1(22)EA14"]),
#        "WS-C3550-"     :(True,  ["Version 12.2(44)SE6"]),
#        "WS-C2960-"     :(False, ["Version 12.2(55)SE10"]),
#        "WS-C2960G-"    :(False, ["Version 12.2(55)SE10"]),
#        "WS-C3560-"     :(True,  ["Version 12.2(55)SE10"]),
#        "WS-C3560G-"    :(True,  ["Version 12.2(55)SE10"]),
#        "WS-C3750-"     :(False, ["Version 12.2(55)SE10"]),
#        "WS-C3750G-"    :(False, ["Version 12.2(55)SE10"]),
#        "WS-C3750X-"    :(False,  ["Version 15.0(2)SE9"]),
#        "WS-C2960X-"    :(False, ["Version 15.2(2)E4"]),
#}

def list_find_snmp_info_v2(item, list):
        found = False
        for i in list:
                if item.lower().find(i.lower()) != -1:
                        found = True
                        break

        return found


def get_modelname_serialnum(entPhysicalSerialNum_entPhysicalModelName):

        oid_1 = None
        oid_1001 = None
        oid_first = None

        for oid, entPhysicalSerialNum, entPhysicalModelName in entPhysicalSerialNum_entPhysicalModelName:
                if entPhysicalSerialNum == None:
                        entPhysicalSerialNum = ""
                if entPhysicalModelName == None:
                        entPhysicalModelName = ""

                entPhysicalSerialNum = entPhysicalSerialNum.strip()
                entPhysicalModelName = entPhysicalModelName.strip()

                # HP
                if oid == "1" and entPhysicalModelName not in ["","Unspecified"]:
                        oid_1 = (oid, entPhysicalModelName, entPhysicalSerialNum)

                # Cisco IOS
                if oid == "1001" and entPhysicalModelName not in ["","Unspecified"]:
                        oid_1001 = (oid, entPhysicalModelName, entPhysicalSerialNum)

                # Cisco Nexus, Cisco big ASA
                if entPhysicalModelName not in ["","Unspecified"] and oid_first == None:
                        oid_first = (oid, entPhysicalModelName, entPhysicalSerialNum)


        if oid_1 != None:
                modelname = oid_1[1]
                serialnum = oid_1[2]
        elif oid_1001 != None:
                modelname = oid_1001[1]
                serialnum = oid_1001[2]
        elif oid_first != None:
                modelname = oid_first[1]
                serialnum = oid_first[2]
        else:
                modelname = "NOTFOUND"
                serialnum = "NOTFOUND"


        modelname = str(modelname).strip()
        serialnum = str(serialnum).strip()

        return (modelname, serialnum)


def inventory_snmp_info_v2(info):

    (entPhysicalSerialNum_entPhysicalModelName, snmp_info) = info

    if len(snmp_info[0]) >= 4:
        (modelname, serialnum) = get_modelname_serialnum(entPhysicalSerialNum_entPhysicalModelName)
        return [ (None, {"serialnum":serialnum}) ]
    
    return []


def check_firmware(params, sysDescr, modelname, switch_info):

        return_ok = 0
        if not params.has_key("standard_firmware"):
                return return_ok


        for item in params.get("standard_firmware"):
                (standard_firmware_model, standard_firmware_version, standard_firmware_return_status) = item

                if modelname.startswith(standard_firmware_model):

                        if not standard_firmware_version in sysDescr: 
                                switch_info.append("(!) Firmware_Check: Standard Firmware is %s - Update required!! (!)" % str(standard_firmware_version))
                                
                                return int(standard_firmware_return_status)
                        else:
                                #switch_info.append("Firmware_Check: OK" )
                                return return_ok


        #switch_info.append("Firmware_Check: NOT_FOUND" )
        return return_ok

def trim_sysDescr(sysDescr):
        sysDescr = sysDescr.replace("\r\n", ", ").rstrip()

        if "Cisco" in sysDescr and "RELEASE SOFTWARE" in sysDescr:
                sysDescr = sysDescr.replace("Cisco Internetwork Operating System Software  IOS (tm)", "Cisco IOS")

                sysDescr = sysDescr.split("RELEASE SOFTWARE")[0].strip()
                if sysDescr.endswith(","):
                         sysDescr =  sysDescr[:-1]
                return  sysDescr
        else:
                return sysDescr

def check_serialnum(params, serialnum, switch_info):
        stored_serialnum = params.get("serialnum").strip()

        if stored_serialnum != serialnum.strip():
                switch_info.append("(!) SerialNum changed: (old: "+ stored_serialnum  +"), Wahrscheinlich wurde das Geraet getauscht! (!)")
                return_warn = 1
                return return_warn
        else:
                return_ok = 0
                return return_ok


def check_snmp_info_v2(item, params, info):

    (entPhysicalSerialNum_entPhysicalModelName, snmp_info) = info
    

    if len(snmp_info[0]) >= 4:
        switch_info = []

        (modelname, serialnum) = get_modelname_serialnum(entPhysicalSerialNum_entPhysicalModelName)
        sysDescr = trim_sysDescr(snmp_info[0][0])

        switch_info.append("sysName: "     + snmp_info[0][2])
        switch_info.append("sysLocation: " + snmp_info[0][3])
        switch_info.append("sysContact: "  + snmp_info[0][1])
        switch_info.append("sysDescr: "    + sysDescr )
        switch_info.append("SerialNum: "   + serialnum)
        switch_info.append("ModelName: "   + modelname)

        check_firmware_return_status  = check_firmware(params, sysDescr, modelname, switch_info)
        check_serialnum_return_status = check_serialnum(params, serialnum, switch_info)



        return_status = max([check_firmware_return_status, check_serialnum_return_status])
        return (return_status, ' ---- '.join(switch_info))
    else:
        return (3, "No data retrieved")
   

# This check works on all SNMP hosts
check_info["snmp_info_v2"] = {
    'check_function'           : check_snmp_info_v2,
    'inventory_function'       : inventory_snmp_info_v2,
    "group"                    : "snmp_info_v2_parameters",
    'service_description'      : 'SNMP Info v2',
    'snmp_info'                : [(".1.3.6.1.2.1.47.1.1.1.1",  [OID_END, "11","13"]), # entPhysicalSerialNum
                                  ('.1.3.6.1.2.1.1', ['1',  #sysDescr
                                                    '4',  #sysContact
                                                    '5',  #sysName 
                                                    '6']), #sysLocation
                                 ],
    'snmp_scan_function'       : lambda oid: oid(".1.3.6.1.2.1.1.1.0") != None,
}
