#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


uthor: Christian Burmeister

def inventory_port_utilization(info):
    return [(None, None)]
    

def check_port_utilization(item, params, info):

    if_all, vlanTrunkPortDynamicStatus, dot1qVlanCurrentEntry = info
    index_trunk_cisco = get_index_trunk_cisco(vlanTrunkPortDynamicStatus)
    index_trunk_hp    = get_index_trunk_hp(dot1qVlanCurrentEntry)

    ifOperStatus_up = "1"
    find_ifType = ["6"]

    trunk_port_index = []
    trunk_port_up = []
    for interface in if_all:
	if interface == None:
                continue
	if interface[0] in index_trunk_cisco + index_trunk_hp:
		if interface[2] in find_ifType:
        		trunk_port_index.append(interface[0])
			if interface[4] == ifOperStatus_up:
        			trunk_port_up.append(interface)

    
    access_port_up = []
    access_port = []
    for interface in if_all:
        if interface == None:
                continue
        if interface[0] not in trunk_port_index:
                if interface[2] in find_ifType:
                        access_port.append(interface)
                        if interface[4] == ifOperStatus_up:
                                access_port_up.append(interface)


    msg  = "Anzahl der Switchports: "
    msg += "All_Ports : " + str(len(trunk_port_index) + len(access_port))  
    msg += " (All_UP: "   + str(len(trunk_port_up)    + len(access_port_up)) + ")"
    msg += " --- "
    msg += "Trunk_Ports : " + str(len(trunk_port_index))  + " (Trunk_UP: " + str(len(trunk_port_up))  + ")"
    msg += " --- " 
    msg += "Access_Ports: " + str(len(access_port))       + " (Access_UP: "  + str(len(access_port_up)) + ")"

    max_port = 25
    if len(access_port) > max_port:
	max_port = len(access_port) * 2
    if len(access_port) > max_port:
        max_port = len(access_port) * 2
    if len(access_port) > max_port:
        max_port = len(access_port) * 2

    perfdata = [("access_port_up", len(access_port_up), "", "", 0, max_port)]
    return (0, msg, perfdata)


def scan_function_port_utilization(oid):
	
    if oid(".1.3.6.1.4.1.9.9.46.1.6.1.1.14.*") != None:
        return True
    if oid(".1.3.6.1.2.1.17.7.1.4.3.1.4.*") != None:
        return True
    
    return False


check_info["port_utilization"] = {
    'check_function':          check_port_utilization,
    'inventory_function':      inventory_port_utilization,
    'includes':                [ 'if_network.include' ],
    'service_description':     "Port utilization",
    'has_perfdata':            True,
    'snmp_info':               [( ".1.3.6.1.2.1", [
        "2.2.1.1",      # ifIndex                   0
        "2.2.1.2",      # ifDescr                   1
        "2.2.1.3",      # ifType                    2
        "31.1.1.1.15",  # ifHighSpeed               .. 1000 means 1GBit
        "2.2.1.8",      # ifOperStatus              4
    ]), 
        oid_vlanTrunkPortDynamicStatus,
        oid_dot1qVlanCurrentEntry
    ],
    'snmp_scan_function'        : scan_function_port_utilization,
#    'group'                     : 'if',
    'node_info'                 : True,
    'default_levels_variable'   : 'if_default_levels',
}
