#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# author
# Christian Burmeister 05/2015




def get_trunks_port_utilization(info):
    index_trunks = []
    if_trunks = []

    if_all = info[0]
    vlanTrunkPortDynamicStatus  = info[1]
    dot1qVlanStaticEntry        = info[2]


    # find Cisco Trunks
    if len(vlanTrunkPortDynamicStatus) > 0:
        for cisco_if in vlanTrunkPortDynamicStatus:
                if cisco_if == None:
                        continue
                is_cisco_trunk = '1'
                if cisco_if[1] == is_cisco_trunk:
                        index_trunks.append(cisco_if[0])


    # find HP Trunks
    if len(dot1qVlanStaticEntry) > 0:
        hp_available_vlan_byte = []
        for hp_vlan in dot1qVlanStaticEntry:
                if hp_vlan == None:
                        continue
                vlan1 = "1"
                if hp_vlan[0] != vlan1:
                        hp_available_vlan_byte.append(hp_vlan)

        hp_available_vlan_bin = []
        for vlan_byte in hp_available_vlan_byte:
                # Beispiel vlan_byte = ['10', '\xff\xff\xf8\x00\x00\x00\x00\x00']
                hex_string =  "".join ([ "%02X" % ord( x ) for x in list(vlan_byte[1])])

                # Beispiel hex_string = FFFFF80000000000
                bin_string =  "".join(["{0:04b}".format(int(c,16)) for c in hex_string])

                # Beispiel bin_string = 1111111111111111111110000000000000000000000000000000000000000000
                hp_available_vlan_bin.append(bin_string)

        if len(hp_available_vlan_bin) > 0:
                min_length = min([len(if_all),  len(hp_available_vlan_bin[0])])
                for i in range(min_length):
                        if_is_tagged = True
                        for j in range(len(hp_available_vlan_bin)):
                              if_untagged = "1"
                              if hp_available_vlan_bin[j][i] == if_untagged:
                               if_is_tagged = False
                        if if_is_tagged:
                              index_trunks.append(str(i+1))

    # return Trunk Interfaces (hp or cisco)
    for interface in if_all:
        if interface == None:
                continue
        if interface[0] in index_trunks:
                interface[1] =  "If_Trunk " + interface[1]
                if_trunks.append([None] + interface)

    return if_trunks

def inventory_port_utilization(info):
#    settings = host_extra_conf_merged(g_hostname, inventory_if_trunk_rules)
#    param_enable_if_trunk    = settings.get('enable_if_trunk', local_enable_if_trunk)

#    if not param_enable_if_trunk:
#        return []

    return [(None, None)]


def check_port_utilization(item, params, info):
    ifOperStatus_up = "1"
    find_ifType = ["6"]
    trunk_port = get_trunks_port_utilization(info)

    trunk_port_index = []
    trunk_port_up = []
    for interface in trunk_port:
        if interface == None:
                continue
        if interface[2+1] in find_ifType:
                trunk_port_index.append(interface[0+1])
                if interface[4+1] == ifOperStatus_up:
                        trunk_port_up.append(interface)


    access_port_up = []
    access_port = []
    for interface in info[0]:
        if interface == None:
                continue
        if interface[0] not in trunk_port_index:
                if interface[2] in find_ifType:
                        access_port.append(interface)
                        if interface[4] == ifOperStatus_up:
                                access_port_up.append(interface)


    msg  = "Anzahl der Switchports: "
    msg += "All_Ports : " + str(len(trunk_port_index) + len(access_port))
    msg += " (All_UP: "   + str(len(trunk_port_up)    + len(access_port_up)) + ")"
    msg += " --- "
    msg += "Trunk_Ports : " + str(len(trunk_port_index))  + " (Trunk_UP: " + str(len(trunk_port_up))  + ")"
    msg += " --- "
    msg += "Access_Ports: " + str(len(access_port))       + " (Access_UP: "  + str(len(access_port_up)) + ")"

    max_port = 25
    if len(access_port) > max_port:
        max_port = len(access_port) * 2
    if len(access_port) > max_port:
        max_port = len(access_port) * 2
    if len(access_port) > max_port:
        max_port = len(access_port) * 2

    perfdata = [("access_port_up", len(access_port_up), "", "", 0, max_port)]
    return (0, msg, perfdata)


def scan_function_port_utilization(oid):

    if oid(".1.3.6.1.4.1.9.9.46.1.6.1.1.14.*") != None:
        return True
    if oid(".1.3.6.1.2.1.17.7.1.4.3.1.4.*") != None:
        return True

    return False


check_info["port_utilization"] = {
    'check_function':          check_port_utilization,
    'inventory_function':      inventory_port_utilization,
    'service_description':     "Port utilization",
    'has_perfdata':            True,
    'snmp_info':               [( ".1.3.6.1.2.1", [
        "2.2.1.1",      # ifIndex                   0
        "2.2.1.2",      # ifDescr                   1
        "2.2.1.3",      # ifType                    2
        "31.1.1.1.15",  # ifHighSpeed               .. 1000 means 1GBit
        "2.2.1.8",      # ifOperStatus              4
    ]),
        (".1.3.6.1.4.1.9.9.46.1.6.1.1",   [OID_END, "14"]),   #Cisco: vlanTrunkPortDynamicStatus
        (".1.3.6.1.2.1.17.7.1.4.3.1",     [OID_END, "4" ]),   #HP: dot1qVlanStaticEntry
    ],
    'snmp_scan_function'        : scan_function_port_utilization,
#    'group'                     : 'if',
    'node_info'                 : True,
    'default_levels_variable'   : 'if_default_levels',
}
